!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--m&&0===v&&T()}(e,n),t&&t(e,n)};var n,i=!0,r="60881101ffc172a1fa59",o=1e4,s={},a=[],l=[];function c(e){var t=S[e];if(!t)return A;var i=function(i){return t.hot.active?(S[i]?-1===S[i].parents.indexOf(e)&&S[i].parents.push(e):(a=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),a=[]),A(i)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return A[e]},set:function(t){A[e]=t}}};for(var o in A)Object.prototype.hasOwnProperty.call(A,o)&&"e"!==o&&Object.defineProperty(i,o,r(o));return i.e=function(e){return"ready"===p&&f("prepare"),v++,A.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(y[e]||E(e),0===v&&0===m&&T())}},i}var u=[],p="idle";function f(e){p=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var d,h,g,m=0,v=0,y={},b={},x={};function _(e){return+e+""===e?+e:e}function w(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return i=e,f("check"),(t=o,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=A.p+""+r+".hot-update.json";i.open("GET",o,!0),i.timeout=t,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)e();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(i.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return f("idle"),null;b={},y={},x=e.c,g=e.h,f("prepare");var t=new Promise(function(e,t){d={resolve:e,reject:t}});h={};return E(0),"prepare"===p&&0===v&&0===m&&T(),t});var t}function E(e){x[e]?(b[e]=!0,m++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=A.p+""+e+"."+r+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function T(){f("ready");var e=d;if(d=null,e)if(i)Promise.resolve().then(function(){return C(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(_(n));e.resolve(t)}}function C(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,i,o,l,c;function u(e){for(var t=[e],n={},i=t.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var r=i.pop(),o=r.id,s=r.chain;if((l=S[o])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(l.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var a=0;a<l.parents.length;a++){var c=l.parents[a],u=S[c];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([c]),moduleId:o,parentId:c};-1===t.indexOf(c)&&(u.hot._acceptedDependencies[o]?(n[c]||(n[c]=[]),d(n[c],[o])):(delete n[c],t.push(c),i.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var m={},v=[],y={},b=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var w in h)if(Object.prototype.hasOwnProperty.call(h,w)){var E;c=_(w);var T=!1,C=!1,D=!1,O="";switch((E=h[w]?u(c):{type:"disposed",moduleId:w}).chain&&(O="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(T=new Error("Aborted because of self decline: "+E.moduleId+O));break;case"declined":t.onDeclined&&t.onDeclined(E),t.ignoreDeclined||(T=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+O));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(E),t.ignoreUnaccepted||(T=new Error("Aborted because "+c+" is not accepted"+O));break;case"accepted":t.onAccepted&&t.onAccepted(E),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(E),D=!0;break;default:throw new Error("Unexception type "+E.type)}if(T)return f("abort"),Promise.reject(T);if(C)for(c in y[c]=h[c],d(v,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,c)&&(m[c]||(m[c]=[]),d(m[c],E.outdatedDependencies[c]));D&&(d(v,[E.moduleId]),y[c]=b)}var I,N=[];for(i=0;i<v.length;i++)c=v[i],S[c]&&S[c].hot._selfAccepted&&N.push({module:c,errorHandler:S[c].hot._selfAccepted});f("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var k,P,L=v.slice();L.length>0;)if(c=L.pop(),l=S[c]){var M={},R=l.hot._disposeHandlers;for(o=0;o<R.length;o++)(n=R[o])(M);for(s[c]=M,l.hot.active=!1,delete S[c],delete m[c],o=0;o<l.children.length;o++){var j=S[l.children[o]];j&&((I=j.parents.indexOf(c))>=0&&j.parents.splice(I,1))}}for(c in m)if(Object.prototype.hasOwnProperty.call(m,c)&&(l=S[c]))for(P=m[c],o=0;o<P.length;o++)k=P[o],(I=l.children.indexOf(k))>=0&&l.children.splice(I,1);for(c in f("apply"),r=g,y)Object.prototype.hasOwnProperty.call(y,c)&&(e[c]=y[c]);var F=null;for(c in m)if(Object.prototype.hasOwnProperty.call(m,c)&&(l=S[c])){P=m[c];var H=[];for(i=0;i<P.length;i++)if(k=P[i],n=l.hot._acceptedDependencies[k]){if(-1!==H.indexOf(n))continue;H.push(n)}for(i=0;i<H.length;i++){n=H[i];try{n(P)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:c,dependencyId:P[i],error:e}),t.ignoreErrored||F||(F=e)}}}for(i=0;i<N.length;i++){var W=N[i];c=W.module,a=[c];try{A(c)}catch(e){if("function"==typeof W.errorHandler)try{W.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:e}),t.ignoreErrored||F||(F=n),F||(F=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:c,error:e}),t.ignoreErrored||F||(F=e)}}return F?(f("fail"),Promise.reject(F)):(f("idle"),new Promise(function(e){e(v)}))}var S={};function A(t){if(S[t])return S[t].exports;var i=S[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:w,apply:C,status:function(e){if(!e)return p;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(l=a,a=[],l),children:[]};return e[t].call(i.exports,i,i.exports,c(t)),i.l=!0,i.exports}A.m=e,A.c=S,A.d=function(e,t,n){A.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},A.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},A.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return A.d(t,"a",t),t},A.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},A.p="",A.h=function(){return r},c(49)(A.s=49)}([function(e,t,n){var i;
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */!function(r){var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},s=10;function a(){this._events={},this._conf&&l.call(this,this._conf)}function l(e){e?(this._conf=e,e.delimiter&&(this.delimiter=e.delimiter),this._events.maxListeners=e.maxListeners!==r?e.maxListeners:s,e.wildcard&&(this.wildcard=e.wildcard),e.newListener&&(this.newListener=e.newListener),e.verboseMemoryLeak&&(this.verboseMemoryLeak=e.verboseMemoryLeak),this.wildcard&&(this.listenerTree={})):this._events.maxListeners=s}function c(e,t){var n="(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.";this.verboseMemoryLeak?(n+=" Event name: %s.",console.error(n,e,t)):console.error(n,e),console.trace&&console.trace()}function u(e){this._events={},this.newListener=!1,this.verboseMemoryLeak=!1,l.call(this,e)}function p(e,t,n,i){if(!n)return[];var r,o,s,a,l,c,u,f=[],d=t.length,h=t[i],g=t[i+1];if(i===d&&n._listeners){if("function"==typeof n._listeners)return e&&e.push(n._listeners),[n];for(r=0,o=n._listeners.length;r<o;r++)e&&e.push(n._listeners[r]);return[n]}if("*"===h||"**"===h||n[h]){if("*"===h){for(s in n)"_listeners"!==s&&n.hasOwnProperty(s)&&(f=f.concat(p(e,t,n[s],i+1)));return f}if("**"===h){for(s in(u=i+1===d||i+2===d&&"*"===g)&&n._listeners&&(f=f.concat(p(e,t,n,d))),n)"_listeners"!==s&&n.hasOwnProperty(s)&&("*"===s||"**"===s?(n[s]._listeners&&!u&&(f=f.concat(p(e,t,n[s],d))),f=f.concat(p(e,t,n[s],i))):f=s===g?f.concat(p(e,t,n[s],i+2)):f.concat(p(e,t,n[s],i)));return f}f=f.concat(p(e,t,n[h],i+1))}if((a=n["*"])&&p(e,t,a,i+1),l=n["**"])if(i<d)for(s in l._listeners&&p(e,t,l,d),l)"_listeners"!==s&&l.hasOwnProperty(s)&&(s===g?p(e,t,l[s],i+2):s===h?p(e,t,l[s],i+1):((c={})[s]=l[s],p(e,t,{"**":c},i+1)));else l._listeners?p(e,t,l,d):l["*"]&&l["*"]._listeners&&p(e,t,l["*"],d);return f}u.EventEmitter2=u,u.prototype.delimiter=".",u.prototype.setMaxListeners=function(e){e!==r&&(this._events||a.call(this),this._events.maxListeners=e,this._conf||(this._conf={}),this._conf.maxListeners=e)},u.prototype.event="",u.prototype.once=function(e,t){return this.many(e,1,t),this},u.prototype.many=function(e,t,n){var i=this;if("function"!=typeof n)throw new Error("many only accepts instances of Function");function r(){0==--t&&i.off(e,r),n.apply(this,arguments)}return r._origin=n,this.on(e,r),i},u.prototype.emit=function(){this._events||a.call(this);var e=arguments[0];if("newListener"===e&&!this.newListener&&!this._events.newListener)return!1;var t,n,i,r,o,s=arguments.length;if(this._all&&this._all.length){if(o=this._all.slice(),s>3)for(t=new Array(s),r=0;r<s;r++)t[r]=arguments[r];for(i=0,n=o.length;i<n;i++)switch(this.event=e,s){case 1:o[i].call(this,e);break;case 2:o[i].call(this,e,arguments[1]);break;case 3:o[i].call(this,e,arguments[1],arguments[2]);break;default:o[i].apply(this,t)}}if(this.wildcard){o=[];var l="string"==typeof e?e.split(this.delimiter):e.slice();p.call(this,o,l,this.listenerTree,0)}else{if("function"==typeof(o=this._events[e])){switch(this.event=e,s){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:for(t=new Array(s-1),r=1;r<s;r++)t[r-1]=arguments[r];o.apply(this,t)}return!0}o&&(o=o.slice())}if(o&&o.length){if(s>3)for(t=new Array(s-1),r=1;r<s;r++)t[r-1]=arguments[r];for(i=0,n=o.length;i<n;i++)switch(this.event=e,s){case 1:o[i].call(this);break;case 2:o[i].call(this,arguments[1]);break;case 3:o[i].call(this,arguments[1],arguments[2]);break;default:o[i].apply(this,t)}return!0}if(!this._all&&"error"===e)throw arguments[1]instanceof Error?arguments[1]:new Error("Uncaught, unspecified 'error' event.");return!!this._all},u.prototype.emitAsync=function(){this._events||a.call(this);var e=arguments[0];if("newListener"===e&&!this.newListener&&!this._events.newListener)return Promise.resolve([!1]);var t,n,i,r,o,s=[],l=arguments.length;if(this._all){if(l>3)for(t=new Array(l),r=1;r<l;r++)t[r]=arguments[r];for(i=0,n=this._all.length;i<n;i++)switch(this.event=e,l){case 1:s.push(this._all[i].call(this,e));break;case 2:s.push(this._all[i].call(this,e,arguments[1]));break;case 3:s.push(this._all[i].call(this,e,arguments[1],arguments[2]));break;default:s.push(this._all[i].apply(this,t))}}if(this.wildcard){o=[];var c="string"==typeof e?e.split(this.delimiter):e.slice();p.call(this,o,c,this.listenerTree,0)}else o=this._events[e];if("function"==typeof o)switch(this.event=e,l){case 1:s.push(o.call(this));break;case 2:s.push(o.call(this,arguments[1]));break;case 3:s.push(o.call(this,arguments[1],arguments[2]));break;default:for(t=new Array(l-1),r=1;r<l;r++)t[r-1]=arguments[r];s.push(o.apply(this,t))}else if(o&&o.length){if(l>3)for(t=new Array(l-1),r=1;r<l;r++)t[r-1]=arguments[r];for(i=0,n=o.length;i<n;i++)switch(this.event=e,l){case 1:s.push(o[i].call(this));break;case 2:s.push(o[i].call(this,arguments[1]));break;case 3:s.push(o[i].call(this,arguments[1],arguments[2]));break;default:s.push(o[i].apply(this,t))}}else if(!this._all&&"error"===e)return arguments[1]instanceof Error?Promise.reject(arguments[1]):Promise.reject("Uncaught, unspecified 'error' event.");return Promise.all(s)},u.prototype.on=function(e,t){if("function"==typeof e)return this.onAny(e),this;if("function"!=typeof t)throw new Error("on only accepts instances of Function");return this._events||a.call(this),this.emit("newListener",e,t),this.wildcard?(function(e,t){for(var n=0,i=(e="string"==typeof e?e.split(this.delimiter):e.slice()).length;n+1<i;n++)if("**"===e[n]&&"**"===e[n+1])return;for(var o=this.listenerTree,s=e.shift();s!==r;){if(o[s]||(o[s]={}),o=o[s],0===e.length)return o._listeners?("function"==typeof o._listeners&&(o._listeners=[o._listeners]),o._listeners.push(t),!o._listeners.warned&&this._events.maxListeners>0&&o._listeners.length>this._events.maxListeners&&(o._listeners.warned=!0,c.call(this,o._listeners.length,s))):o._listeners=t,!0;s=e.shift()}return!0}.call(this,e,t),this):(this._events[e]?("function"==typeof this._events[e]&&(this._events[e]=[this._events[e]]),this._events[e].push(t),!this._events[e].warned&&this._events.maxListeners>0&&this._events[e].length>this._events.maxListeners&&(this._events[e].warned=!0,c.call(this,this._events[e].length,e))):this._events[e]=t,this)},u.prototype.onAny=function(e){if("function"!=typeof e)throw new Error("onAny only accepts instances of Function");return this._all||(this._all=[]),this._all.push(e),this},u.prototype.addListener=u.prototype.on,u.prototype.off=function(e,t){if("function"!=typeof t)throw new Error("removeListener only takes instances of Function");var n,i=[];if(this.wildcard){var s="string"==typeof e?e.split(this.delimiter):e.slice();i=p.call(this,null,s,this.listenerTree,0)}else{if(!this._events[e])return this;n=this._events[e],i.push({_listeners:n})}for(var a=0;a<i.length;a++){var l=i[a];if(n=l._listeners,o(n)){for(var c=-1,u=0,f=n.length;u<f;u++)if(n[u]===t||n[u].listener&&n[u].listener===t||n[u]._origin&&n[u]._origin===t){c=u;break}if(c<0)continue;return this.wildcard?l._listeners.splice(c,1):this._events[e].splice(c,1),0===n.length&&(this.wildcard?delete l._listeners:delete this._events[e]),this.emit("removeListener",e,t),this}(n===t||n.listener&&n.listener===t||n._origin&&n._origin===t)&&(this.wildcard?delete l._listeners:delete this._events[e],this.emit("removeListener",e,t))}return function e(t){if(t!==r){var n=Object.keys(t);for(var i in n){var o=n[i],s=t[o];s instanceof Function||"object"!=typeof s||null===s||(Object.keys(s).length>0&&e(t[o]),0===Object.keys(s).length&&delete t[o])}}}(this.listenerTree),this},u.prototype.offAny=function(e){var t,n=0,i=0;if(e&&this._all&&this._all.length>0){for(n=0,i=(t=this._all).length;n<i;n++)if(e===t[n])return t.splice(n,1),this.emit("removeListenerAny",e),this}else{for(n=0,i=(t=this._all).length;n<i;n++)this.emit("removeListenerAny",t[n]);this._all=[]}return this},u.prototype.removeListener=u.prototype.off,u.prototype.removeAllListeners=function(e){if(0===arguments.length)return!this._events||a.call(this),this;if(this.wildcard)for(var t="string"==typeof e?e.split(this.delimiter):e.slice(),n=p.call(this,null,t,this.listenerTree,0),i=0;i<n.length;i++){n[i]._listeners=null}else this._events&&(this._events[e]=null);return this},u.prototype.listeners=function(e){if(this.wildcard){var t=[],n="string"==typeof e?e.split(this.delimiter):e.slice();return p.call(this,t,n,this.listenerTree,0),t}return this._events||a.call(this),this._events[e]||(this._events[e]=[]),o(this._events[e])||(this._events[e]=[this._events[e]]),this._events[e]},u.prototype.listenerCount=function(e){return this.listeners(e).length},u.prototype.listenersAny=function(){return this._all?this._all:[]},(i=function(){return u}.call(t,n,t,e))===r||(e.exports=i)}()},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var i=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach(function(e){i[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,a=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))r.call(n,c)&&(a[c]=n[c]);if(i){s=i(n);for(var u=0;u<s.length;u++)o.call(n,s[u])&&(a[s[u]]=n[s[u]])}}return a}},function(e,t){function n(e){e=e||{},this.x=e.x||0,this.y=e.y||0,this.z=e.z||0}n.prototype.add=function(e){this.x+=e.x,this.y+=e.y,this.z+=e.z},n.prototype.subtract=function(e){this.x-=e.x,this.y-=e.y,this.z-=e.z},n.prototype.multiplyQuaternion=function(e){var t=e.w*this.x+e.y*this.z-e.z*this.y,n=e.w*this.y+e.z*this.x-e.x*this.z,i=e.w*this.z+e.x*this.y-e.y*this.x,r=-e.x*this.x-e.y*this.y-e.z*this.z;this.x=t*e.w+r*-e.x+n*-e.z-i*-e.y,this.y=n*e.w+r*-e.y+i*-e.x-t*-e.z,this.z=i*e.w+r*-e.z+t*-e.y-n*-e.x},n.prototype.clone=function(){return new n(this)},e.exports=n},function(e,t,n){var i=n(1);e.exports=function(e){i(this,e)}},function(e,t){e.exports={URDF_SPHERE:0,URDF_BOX:1,URDF_CYLINDER:2,URDF_MESH:3}},function(e,t,n){var i=n(1);e.exports=function(e){i(this,e)}},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,l=o.slice,c=o.concat,u=o.push,p=o.indexOf,f={},d=f.toString,h=f.hasOwnProperty,g=h.toString,m=g.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},x={type:!0,src:!0,noModule:!0};function _(e,t,n){var i,r=(t=t||s).createElement("script");if(r.text=e,n)for(i in x)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[d.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.3.1",constructor:E,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||y(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&E.isPlainObject(n)?n:{},s[t]=E.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},E.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=a(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&g.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){_(e)},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?E.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:p.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(C(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return c.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){f["[object "+t+"]"]=t.toLowerCase()});var S=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,i,r,o,s,a,l,c,u,p,f,d,h,g,m,v,y,b,x="sizzle"+1*new Date,_=e.document,w=0,E=0,T=se(),C=se(),S=se(),A=function(e,t){return e===t&&(p=!0),0},D={}.hasOwnProperty,O=[],I=O.pop,N=O.push,k=O.push,P=O.slice,L=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+R+"*("+j+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+R+"*\\]",H=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",W=new RegExp(R+"+","g"),z=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),U=new RegExp("^"+R+"*,"+R+"*"),q=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),B=new RegExp("="+R+"*([^\\]'\"]*?)"+R+"*\\]","g"),G=new RegExp(H),V=new RegExp("^"+j+"$"),Y={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{k.apply(O=P.call(_.childNodes),_.childNodes),O[_.childNodes.length].nodeType}catch(e){k={apply:O.length?function(e,t){N.apply(e,P.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,a,c,u,p,h,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&((t?t.ownerDocument||t:_)!==d&&f(t),t=t||d,g)){if(11!==w&&(p=Q.exec(e)))if(o=p[1]){if(9===w){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(y&&(c=y.getElementById(o))&&b(t,c)&&c.id===o)return i.push(c),i}else{if(p[2])return k.apply(i,t.getElementsByTagName(e)),i;if((o=p[3])&&n.getElementsByClassName&&t.getElementsByClassName)return k.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!S[e+" "]&&(!m||!m.test(e))){if(1!==w)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(te,ne):t.setAttribute("id",u=x),a=(h=s(e)).length;a--;)h[a]="#"+u+" "+ve(h[a]);v=h.join(","),y=J.test(e)&&ge(t.parentNode)||t}if(v)try{return k.apply(i,y.querySelectorAll(v)),i}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(z,"$1"),t,i,r)}function se(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[x]=!0,e}function le(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return ae(function(t){return t=+t,ae(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},f=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:_;return s!==d&&9===s.nodeType&&s.documentElement?(h=(d=s).documentElement,g=!o(d),_!==d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=$.test(d.getElementsByClassName),n.getById=le(function(e){return h.appendChild(e).id=x,!d.getElementsByName||!d.getElementsByName(x).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=$.test(d.querySelectorAll))&&(le(function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+M+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=$.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",H)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=$.test(h.compareDocumentPosition),b=t||$.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return p=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===d||e.ownerDocument===_&&b(_,e)?-1:t===d||t.ownerDocument===_&&b(_,t)?1:u?L(u,e)-L(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return p=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===d?-1:t===d?1:r?-1:o?1:u?L(u,e)-L(u,t):0;if(r===o)return ue(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ue(s[i],a[i]):s[i]===_?-1:a[i]===_?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&f(e),t=t.replace(B,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&f(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&f(e);var r=i.attrHandle[t.toLowerCase()],o=r&&D.call(i.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(p=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(A),p){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return u=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:ae,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&G.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&T(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(W," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,p,f,d,h,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(o){for(;g;){for(f=t;f=f[g];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(b=(d=(c=(u=(p=(f=m)[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===w&&c[1])&&c[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||(b=d=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[w,d,b];break}}else if(y&&(b=d=(c=(u=(p=(f=t)[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===w&&c[1]),!1===b)for(;(f=++d&&f&&f[g]||(b=d=0)||h.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&((u=(p=f[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]=[w,b]),f!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=L(e,o[s])]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ae(function(e){var t=[],n=[],i=a(e.replace(z,"$1"));return i[x]?ae(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return oe(e,t).length>0}}),contains:ae(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:ae(function(e){return V.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=fe(t);function me(){}function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=E++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,l){var c,u,p,f=[w,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(u=(p=t[x]||(t[x]={}))[t.uniqueID]||(p[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===w&&c[1]===a)return f[2]=c[2];if(u[o]=f,f[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function _e(e,t,n,i,r,o){return i&&!i[x]&&(i=_e(i)),r&&!r[x]&&(r=_e(r,o)),ae(function(o,s,a,l){var c,u,p,f=[],d=[],h=s.length,g=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:xe(g,f,e,a,l),v=n?r||(o?e:h||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(c=xe(v,d),i(c,[],a,l),u=c.length;u--;)(p=c[u])&&(v[d[u]]=!(m[d[u]]=p));if(o){if(r||e){if(r){for(c=[],u=v.length;u--;)(p=v[u])&&c.push(m[u]=p);r(null,v=[],c,l)}for(u=v.length;u--;)(p=v[u])&&(c=r?L(o,p):f[u])>-1&&(o[c]=!(s[c]=p))}}else v=xe(v===s?v.splice(h,v.length):v),r?r(null,s,v,l):k.apply(s,v)})}function we(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,u=ye(function(e){return e===t},a,!0),p=ye(function(e){return L(t,e)>-1},a,!0),f=[function(e,n,i){var r=!s&&(i||n!==c)||((t=n).nodeType?u(e,n,i):p(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])f=[ye(be(f),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return _e(l>1&&be(f),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(z,"$1"),n,l<r&&we(e.slice(l,r)),r<o&&we(e=e.slice(r)),r<o&&ve(e))}f.push(n)}return be(f)}return me.prototype=i.filters=i.pseudos,i.setFilters=new me,s=oe.tokenize=function(e,t){var n,r,o,s,a,l,c,u=C[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=i.preFilter;a;){for(s in n&&!(r=U.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),n=!1,(r=q.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z," ")}),a=a.slice(n.length)),i.filter)!(r=Y[s].exec(a))||c[s]&&!(r=c[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?oe.error(e):C(e,l).slice(0)},a=oe.compile=function(e,t){var n,r=[],o=[],a=S[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=we(t[n]))[x]?r.push(a):o.push(a);(a=S(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,a,l,u){var p,h,m,v=0,y="0",b=o&&[],x=[],_=c,E=o||r&&i.find.TAG("*",u),T=w+=null==_?1:Math.random()||.1,C=E.length;for(u&&(c=s===d||s||u);y!==C&&null!=(p=E[y]);y++){if(r&&p){for(h=0,s||p.ownerDocument===d||(f(p),a=!g);m=e[h++];)if(m(p,s||d,a)){l.push(p);break}u&&(w=T)}n&&((p=!m&&p)&&v--,o&&b.push(p))}if(v+=y,n&&y!==v){for(h=0;m=t[h++];)m(b,x,s,a);if(o){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=I.call(l));x=xe(x)}k.apply(l,x),u&&!o&&x.length>0&&v+t.length>1&&oe.uniqueSort(l)}return u&&(w=T,c=_),b};return n?ae(o):o}(o,r))).selector=e}return a},l=oe.select=function(e,t,n,r){var o,l,c,u,p,f="function"==typeof e&&e,d=!r&&s(e=f.selector||e);if(n=n||[],1===d.length){if((l=d[0]=d[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=Y.needsContext.test(e)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((p=i.find[u])&&(r=p(c.matches[0].replace(Z,ee),J.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&ve(l)))return k.apply(n,r),n;break}}return(f||a(e,d))(r,t,!g,n,!t||J.test(e)&&ge(t.parentNode)||t),n},n.sortStable=x.split("").sort(A).join("")===x,n.detectDuplicates=!!p,f(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ce(M,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(n);E.find=S,E.expr=S.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=S.uniqueSort,E.text=S.getText,E.isXMLDoc=S.isXML,E.contains=S.contains,E.escapeSelector=S.escape;var A=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&E(e).is(n))break;i.push(e)}return i},D=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},O=E.expr.match.needsContext;function I(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(e,t,n){return y(t)?E.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?E.grep(e,function(e){return e===t!==n}):"string"!=typeof t?E.grep(e,function(e){return p.call(t,e)>-1!==n}):E.filter(t,e,n)}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<i;t++)if(E.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,r[t],n);return i>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(k(this,e||[],!1))},not:function(e){return this.pushStack(k(this,e||[],!0))},is:function(e){return!!k(this,"string"==typeof e&&O.test(e)?E(e):e||[],!1).length}});var P,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||P,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),N.test(i[1])&&E.isPlainObject(t))for(i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,P=E(s);var M=/^(?:parents|prev(?:Until|All))/,R={children:!0,contents:!0,next:!0,prev:!0};function j(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&E(e);if(!O.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?p.call(E(e),this[0]):p.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return A(e,"parentNode")},parentsUntil:function(e,t,n){return A(e,"parentNode",n)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return A(e,"nextSibling")},prevAll:function(e){return A(e,"previousSibling")},nextUntil:function(e,t,n){return A(e,"nextSibling",n)},prevUntil:function(e,t,n){return A(e,"previousSibling",n)},siblings:function(e){return D((e.parentNode||{}).firstChild,e)},children:function(e){return D(e.firstChild)},contents:function(e){return I(e,"iframe")?e.contentDocument:(I(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(e,t){E.fn[e]=function(n,i){var r=E.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=E.filter(i,r)),this.length>1&&(R[e]||E.uniqueSort(r),M.test(e)&&r.reverse()),this.pushStack(r)}});var F=/[^\x20\t\r\n\f]+/g;function H(e){return e}function W(e){throw e}function z(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(F)||[],function(e,n){t[n]=!0}),t}(e):E.extend({},e);var t,n,i,r,o=[],s=[],a=-1,l=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){E.each(n,function(n,i){y(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==w(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;(n=E.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?E.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return E.Deferred(function(n){E.each(t,function(t,i){var r=y(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,i,r){var o=0;function s(e,t,i,r){return function(){var a=this,l=arguments,c=function(){var n,c;if(!(e<o)){if((n=i.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?r?c.call(n,s(o,t,H,r),s(o,t,W,r)):(o++,c.call(n,s(o,t,H,r),s(o,t,W,r),s(o,t,H,t.notifyWith))):(i!==H&&(a=void 0,l=[n]),(r||t.resolveWith)(a,l))}},u=r?c:function(){try{c()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,u.stackTrace),e+1>=o&&(i!==W&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?u():(E.Deferred.getStackHook&&(u.stackTrace=E.Deferred.getStackHook()),n.setTimeout(u))}}return E.Deferred(function(n){t[0][3].add(s(0,n,y(r)?r:H,n.notifyWith)),t[1][3].add(s(0,n,y(e)?e:H)),t[2][3].add(s(0,n,y(i)?i:W))}).promise()},promise:function(e){return null!=e?E.extend(e,r):r}},o={};return E.each(t,function(e,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=l.call(arguments),o=E.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?l.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(z(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||y(r[n]&&r[n].then)))return o.then();for(;n--;)z(r[n],s(n),o.reject);return o.promise()}});var U=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&U.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout(function(){throw e})};var q=E.Deferred();function B(){s.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),E.ready()}E.fn.ready=function(e){return q.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||q.resolveWith(s,[E]))}}),E.ready.then=q.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(E.ready):(s.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var G=function(e,t,n,i,r,o,s){var a=0,l=e.length,c=null==n;if("object"===w(n))for(a in r=!0,n)G(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,y(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(E(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):l?t(e[0],n):o},V=/^-ms-/,Y=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function K(e){return e.replace(V,"ms-").replace(Y,X)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[K(t)]=n;else for(i in t)r[K(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in i?[t]:t.match(F)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||E.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var J=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=K(i.slice(5)),ne(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Z.set(this,e)}):G(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,r=n.shift(),o=E._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){E.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:E.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each(function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=E.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=J.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&E.contains(e.ownerDocument,e)&&"none"===E.css(e,"display")},ae=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r};function le(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=a(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),u=(E.cssNumber[t]||"px"!==c&&+l)&&re.exec(E.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)E.style(e,t,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;u*=2,E.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ce={};function ue(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=E.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function pe(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&se(i)&&(r[o]=ue(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}E.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?E(this).show():E(this).hide()})}});var fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&I(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var ye,be,xe=/<|&#?\w+;/;function _e(e,t,n,i,r){for(var o,s,a,l,c,u,p=t.createDocumentFragment(),f=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))E.merge(f,o.nodeType?[o]:o);else if(xe.test(o)){for(s=s||p.appendChild(t.createElement("div")),a=(de.exec(o)||["",""])[1].toLowerCase(),l=ge[a]||ge._default,s.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;E.merge(f,s.childNodes),(s=p.firstChild).textContent=""}else f.push(t.createTextNode(o));for(p.textContent="",d=0;o=f[d++];)if(i&&E.inArray(o,i)>-1)r&&r.push(o);else if(c=E.contains(o.ownerDocument,o),s=me(p.appendChild(o),"script"),c&&ve(s),n)for(u=0;o=s[u++];)he.test(o.type||"")&&n.push(o);return p}ye=s.createDocumentFragment().appendChild(s.createElement("div")),(be=s.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ye.appendChild(be),v.checkClone=ye.cloneNode(!0).cloneNode(!0).lastChild.checked,ye.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ye.cloneNode(!0).lastChild.defaultValue;var we=s.documentElement,Ee=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ae(){return!1}function De(){try{return s.activeElement}catch(e){}}function Oe(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Oe(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ae;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return E().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),e.each(function(){E.event.add(this,t,r,i,n)})}E.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,c,u,p,f,d,h,g,m=J.get(e);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&E.find.matchesSelector(we,r),n.guid||(n.guid=E.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(F)||[""]).length;c--;)d=g=(a=Ce.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),d&&(p=E.event.special[d]||{},d=(r?p.delegateType:p.bindType)||d,p=E.event.special[d]||{},u=E.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:h.join(".")},o),(f=l[d])||((f=l[d]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(d,s)),p.add&&(p.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),E.event.global[d]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,c,u,p,f,d,h,g,m=J.hasData(e)&&J.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(F)||[""]).length;c--;)if(d=g=(a=Ce.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),d){for(p=E.event.special[d]||{},f=l[d=(i?p.delegateType:p.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)u=f[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(o,1),u.selector&&f.delegateCount--,p.remove&&p.remove.call(e,u));s&&!f.length&&(p.teardown&&!1!==p.teardown.call(e,h,m.handle)||E.removeEvent(e,d,m.handle),delete l[d])}else for(d in l)E.event.remove(e,d+t[c],n,i,!0);E.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=E.event.fix(e),l=new Array(arguments.length),c=(J.get(this,"events")||{})[a.type]||[],u=E.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=E.event.handlers.call(this,a,c),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((E.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?E(r,this).index(c)>-1:E.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==De()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===De()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&I(this,"input"))return this.click(),!1},_default:function(e){return I(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ae,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Ae,isPropagationStopped:Ae,isImmediatePropagationStopped:Ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||E.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),E.fn.extend({on:function(e,t,n,i){return Oe(this,e,t,n,i)},one:function(e,t,n,i){return Oe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ae),this.each(function(){E.event.remove(this,e,n,t)})}});var Ie=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ne=/<script|<style|<link/i,ke=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e,t){return I(e,"table")&&I(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function je(e,t){var n,i,r,o,s,a,l,c;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),s=J.set(t,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)E.event.add(t,r,c[r][n]);Z.hasData(e)&&(a=Z.access(e),l=E.extend({},a),Z.set(t,l))}}function Fe(e,t,n,i){t=c.apply([],t);var r,o,s,a,l,u,p=0,f=e.length,d=f-1,h=t[0],g=y(h);if(g||f>1&&"string"==typeof h&&!v.checkClone&&ke.test(h))return e.each(function(r){var o=e.eq(r);g&&(t[0]=h.call(this,r,o.html())),Fe(o,t,n,i)});if(f&&(o=(r=_e(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=E.map(me(r,"script"),Me)).length;p<f;p++)l=r,p!==d&&(l=E.clone(l,!0,!0),a&&E.merge(s,me(l,"script"))),n.call(e[p],l,p);if(a)for(u=s[s.length-1].ownerDocument,E.map(s,Re),p=0;p<a;p++)l=s[p],he.test(l.type||"")&&!J.access(l,"globalEval")&&E.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(l.src):_(l.textContent.replace(Pe,""),u,l))}return e}function He(e,t,n){for(var i,r=t?E.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||E.cleanData(me(i)),i.parentNode&&(n&&E.contains(i.ownerDocument,i)&&ve(me(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e.replace(Ie,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a,l,c,u=e.cloneNode(!0),p=E.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(s=me(u),i=0,r=(o=me(e)).length;i<r;i++)a=o[i],l=s[i],void 0,"input"===(c=l.nodeName.toLowerCase())&&fe.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||me(e),s=s||me(u),i=0,r=o.length;i<r;i++)je(o[i],s[i]);else je(e,u);return(s=me(u,"script")).length>0&&ve(s,!p&&me(e,"script")),u},cleanData:function(e){for(var t,n,i,r=E.event.special,o=0;void 0!==(n=e[o]);o++)if($(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return G(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Fe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Fe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return G(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(me(this)),n&&n.replaceChild(t,this))},e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){E.fn[e]=function(e){for(var n,i=[],r=E(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),E(r[s])[t](n),u.apply(i,n.get());return this.pushStack(i)}});var We=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),ze=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ue=new RegExp(oe.join("|"),"i");function qe(e,t,n){var i,r,o,s,a=e.style;return(n=n||ze(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||E.contains(e.ownerDocument,e)||(s=E.style(e,t)),!v.pixelBoxStyles()&&We.test(s)&&Ue.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Be(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",we.appendChild(c).appendChild(u);var e=n.getComputedStyle(u);i="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",a=36===t(e.right),r=36===t(e.width),u.style.position="absolute",o=36===u.offsetWidth||"absolute",we.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,l,c=s.createElement("div"),u=s.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===u.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o}}))}();var Ge=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,Ye={position:"absolute",visibility:"hidden",display:"block"},Xe={letterSpacing:"0",fontWeight:"400"},Ke=["Webkit","Moz","ms"],$e=s.createElement("div").style;function Qe(e){var t=E.cssProps[e];return t||(t=E.cssProps[e]=function(e){if(e in $e)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ke.length;n--;)if((e=Ke[n]+t)in $e)return e}(e)||e),t}function Je(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ze(e,t,n,i,r,o){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=E.css(e,n+oe[s],!0,r)),i?("content"===n&&(l-=E.css(e,"padding"+oe[s],!0,r)),"margin"!==n&&(l-=E.css(e,"border"+oe[s]+"Width",!0,r))):(l+=E.css(e,"padding"+oe[s],!0,r),"padding"!==n?l+=E.css(e,"border"+oe[s]+"Width",!0,r):a+=E.css(e,"border"+oe[s]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))),l}function et(e,t,n){var i=ze(e),r=qe(e,t,i),o="border-box"===E.css(e,"boxSizing",!1,i),s=o;if(We.test(r)){if(!n)return r;r="auto"}return s=s&&(v.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===E.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(r=parseFloat(r)||0)+Ze(e,t,n||(o?"border":"content"),s,i,r)+"px"}function tt(e,t,n,i,r){return new tt.prototype.init(e,t,n,i,r)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=K(t),l=Ve.test(t),c=e.style;if(l||(t=Qe(a)),s=E.cssHooks[t]||E.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=le(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(E.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,s,a=K(t);return Ve.test(t)||(t=Qe(a)),(s=E.cssHooks[t]||E.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=qe(e,t,i)),"normal"===r&&t in Xe&&(r=Xe[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),E.each(["height","width"],function(e,t){E.cssHooks[t]={get:function(e,n,i){if(n)return!Ge.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,i):ae(e,Ye,function(){return et(e,t,i)})},set:function(e,n,i){var r,o=ze(e),s="border-box"===E.css(e,"boxSizing",!1,o),a=i&&Ze(e,t,i,s,o);return s&&v.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),a&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),Je(0,n,a)}}}),E.cssHooks.marginLeft=Be(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(e,t){E.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(E.cssHooks[e+t].set=Je)}),E.fn.extend({css:function(e,t){return G(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=ze(e),r=t.length;s<r;s++)o[t[s]]=E.css(e,t[s],!1,i);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,arguments.length>1)}}),E.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[E.cssProps[e.prop]]&&!E.cssHooks[e.prop]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=tt.prototype.init,E.fx.step={};var nt,it,rt=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){it&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,E.fx.interval),E.fx.tick())}function at(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function lt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ct(e,t,n){for(var i,r=(ut.tweeners[t]||[]).concat(ut.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function ut(e,t,n){var i,r,o=0,s=ut.prefilters.length,a=E.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=nt||at(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||at(),duration:n.duration,tweens:[],createTween:function(t,n){var i=E.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=K(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=E.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);o<s;o++)if(i=ut.prefilters[o].call(c,e,u,c.opts))return y(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(u,ct,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(ut,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(F);for(var n,i=0,r=e.length;i<r;i++)n=e[i],ut.tweeners[n]=ut.tweeners[n]||[],ut.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,c,u,p="width"in t||"height"in t,f=this,d={},h=e.style,g=e.nodeType&&se(e),m=J.get(e,"fxshow");for(i in n.queue||(null==(s=E._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,E.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],rt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}d[i]=m&&m[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(d))for(i in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=J.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(pe([e],!0),c=e.style.display||c,u=E.css(e,"display"),pe([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,d)l||(m?"hidden"in m&&(g=m.hidden):m=J.access(e,"fxshow",{display:c}),o&&(m.hidden=!g),g&&pe([e],!0),f.done(function(){for(i in g||pe([e]),J.remove(e,"fxshow"),d)E.style(e,i,d[i])})),l=ct(g?m[i]:0,i,f),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ut.prefilters.unshift(e):ut.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=E.isEmptyObject(e),o=E.speed(t,n,i),s=function(){var t=ut(this,E.extend({},e),o);(r||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=E.timers,s=J.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ot.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||E.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=E.timers,s=i?i.length:0;for(n.finish=!0,E.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(e,t){var n=E.fn[t];E.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(lt(t,!0),e,i,r)}}),E.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){E.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),nt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){it||(it=!0,st())},E.fx.stop=function(){it=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var pt,ft=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return G(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(r=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&I(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(F);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ft[t]||E.find.attr;ft[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=ft[s],ft[s]=r,r=null!=n(e,t,i)?s:null,ft[s]=o),r}});var dt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function gt(e){return(e.match(F)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(F)||[]}E.fn.extend({prop:function(e,t){return G(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,r=E.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,l=0;if(y(e))return this.each(function(t){E(this).addClass(e.call(this,t,mt(this)))});if((t=vt(e)).length)for(;n=this[l++];)if(r=mt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=gt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,l=0;if(y(e))return this.each(function(t){E(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[l++];)if(r=mt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=gt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){E(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,r,o,s;if(i)for(r=0,o=E(this),s=vt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+gt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;E.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=y(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,E(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,function(e){return null==e?"":e+""})),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(yt,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:gt(E.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:r.length;for(i=o<0?l:s?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!I(n.parentNode,"optgroup"))){if(t=E(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=E.makeArray(t),s=r.length;s--;)((i=r[s]).selected=E.inArray(E.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},v.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,i,r){var o,a,l,c,u,p,f,d,g=[i||s],m=h.call(e,"type")?e.type:e,v=h.call(e,"namespace")?e.namespace.split("."):[];if(a=d=l=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!bt.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(m=(v=m.split(".")).shift(),v.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[E.expando]?e:new E.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:E.makeArray(t,[e]),f=E.event.special[m]||{},r||!f.trigger||!1!==f.trigger.apply(i,t))){if(!r&&!f.noBubble&&!b(i)){for(c=f.delegateType||m,bt.test(c+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),l=a;l===(i.ownerDocument||s)&&g.push(l.defaultView||l.parentWindow||n)}for(o=0;(a=g[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?c:f.bindType||m,(p=(J.get(a,"events")||{})[e.type]&&J.get(a,"handle"))&&p.apply(a,t),(p=u&&a[u])&&p.apply&&$(a)&&(e.result=p.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(g.pop(),t)||!$(i)||u&&y(i[m])&&!b(i)&&((l=i[u])&&(i[u]=null),E.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,xt),i[m](),e.isPropagationStopped()&&d.removeEventListener(m,xt),E.event.triggered=void 0,l&&(i[u]=l)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}});var _t=n.location,wt=Date.now(),Et=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var Tt=/\[\]$/,Ct=/\r?\n/g,St=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,i){var r;if(Array.isArray(t))E.each(t,function(t,r){n||Tt.test(e)?i(e,r):Dt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==w(t))i(e,t);else for(r in t)Dt(e+"["+r+"]",t[r],n,i)}E.param=function(e,t){var n,i=[],r=function(e,t){var n=y(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){r(this.name,this.value)});else for(n in e)Dt(n,e[n],t,r);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&At.test(this.nodeName)&&!St.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}}):{name:t.name,value:n.replace(Ct,"\r\n")}}).get()}});var Ot=/%20/g,It=/#.*$/,Nt=/([?&])_=[^&]*/,kt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Lt=/^\/\//,Mt={},Rt={},jt="*/".concat("*"),Ft=s.createElement("a");function Ht(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(F)||[];if(y(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Wt(e,t,n,i){var r={},o=e===Rt;function s(a){var l;return r[a]=!0,E.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)}),l}return s(t.dataTypes[0])||!r["*"]&&s("*")}function zt(e,t){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&E.extend(!0,e,i),e}Ft.href=_t.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,E.ajaxSettings),t):zt(E.ajaxSettings,e)},ajaxPrefilter:Ht(Mt),ajaxTransport:Ht(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,l,c,u,p,f,d,h=E.ajaxSetup({},t),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?E(g):E.event,v=E.Deferred(),y=E.Callbacks("once memory"),b=h.statusCode||{},x={},_={},w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=kt.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=_[e.toLowerCase()]=_[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||w;return i&&i.abort(t),C(0,t),this}};if(v.promise(T),h.url=((e||h.url||_t.href)+"").replace(Lt,_t.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(F)||[""],null==h.crossDomain){c=s.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Ft.protocol+"//"+Ft.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=E.param(h.data,h.traditional)),Wt(Mt,h,t,T),u)return T;for(f in(p=E.event&&h.global)&&0==E.active++&&E.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Pt.test(h.type),r=h.url.replace(It,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Ot,"+")):(d=h.url.slice(r.length),h.data&&(h.processData||"string"==typeof h.data)&&(r+=(Et.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(Nt,"$1"),d=(Et.test(r)?"&":"?")+"_="+wt+++d),h.url=r+d),h.ifModified&&(E.lastModified[r]&&T.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&T.setRequestHeader("If-None-Match",E.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+jt+"; q=0.01":""):h.accepts["*"]),h.headers)T.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(g,T,h)||u))return T.abort();if(w="abort",y.add(h.complete),T.done(h.success),T.fail(h.error),i=Wt(Rt,h,t,T)){if(T.readyState=1,p&&m.trigger("ajaxSend",[T,h]),u)return T;h.async&&h.timeout>0&&(l=n.setTimeout(function(){T.abort("timeout")},h.timeout));try{u=!1,i.send(x,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,s,a){var c,f,d,x,_,w=t;u||(u=!0,l&&n.clearTimeout(l),i=void 0,o=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,T,s)),x=function(e,t,n,i){var r,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,x,T,c),c?(h.ifModified&&((_=T.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=_),(_=T.getResponseHeader("etag"))&&(E.etag[r]=_)),204===e||"HEAD"===h.type?w="nocontent":304===e?w="notmodified":(w=x.state,f=x.data,c=!(d=x.error))):(d=w,!e&&w||(w="error",e<0&&(e=0))),T.status=e,T.statusText=(t||w)+"",c?v.resolveWith(g,[f,w,T]):v.rejectWith(g,[T,w,d]),T.statusCode(b),b=void 0,p&&m.trigger(c?"ajaxSuccess":"ajaxError",[T,h,c?f:d]),y.fireWith(g,[T,w]),p&&(m.trigger("ajaxComplete",[T,h]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,t){E[t]=function(e,n,i,r){return y(n)&&(r=r||i,i=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:r,data:n,success:i},E.isPlainObject(e)&&e))}}),E._evalUrl=function(e){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){E(this).wrapInner(e.call(this,t))}):this.each(function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){E(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},qt=E.ajaxSettings.xhr();v.cors=!!qt&&"withCredentials"in qt,v.ajax=qt=!!qt,E.ajaxTransport(function(e){var t,i;if(v.cors||qt&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ut[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&i()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=E("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var Bt,Gt=[],Vt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||E.expando+"_"+wt++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,i){var r,o,s,a=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Vt,"$1"+r):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||E.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?E(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),s&&y(o)&&o(s[0]),s=o=void 0}),"script"}),v.createHTMLDocument=((Bt=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Bt.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(i)):t=s),r=N.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=_e([e],t,o),o&&o.length&&E(o).remove(),E.merge([],r.childNodes)));var i,r,o},E.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=gt(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&E.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.expr.pseudos.animated=function(e){return E.grep(E.timers,function(t){return e===t.elem}).length},E.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,c=E.css(e,"position"),u=E(e),p={};"static"===c&&(e.style.position="relative"),a=u.offset(),o=E.css(e,"top"),l=E.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(s=(i=u.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),y(t)&&(t=t.call(e,n,E.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+r),"using"in t?t.using.call(e,p):u.css(p)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){E.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),r.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-E.css(i,"marginTop",!0),left:t.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||we})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;E.fn[e]=function(i){return G(this,function(e,i,r){var o;if(b(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),E.each(["top","left"],function(e,t){E.cssHooks[t]=Be(v.pixelPosition,function(e,n){if(n)return n=qe(e,t),We.test(n)?E(e).position()[t]+"px":n})}),E.each({Height:"height",Width:"width"},function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){E.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return G(this,function(t,n,r){var o;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?E.css(t,n,a):E.style(t,n,r,a)},t,s?r:void 0,s)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),E.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return i=l.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(l.call(arguments)))}).guid=e.guid=e.guid||E.guid++,r},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=I,E.isFunction=y,E.isWindow=b,E.camelCase=K,E.type=w,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return E}.apply(t,[]))||(e.exports=i);var Yt=n.jQuery,Xt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Xt),e&&n.jQuery===E&&(n.jQuery=Yt),E},r||(n.jQuery=n.$=E),E})},function(e,t){function n(e){e=e||{},this.x=e.x||0,this.y=e.y||0,this.z=e.z||0,this.w="number"==typeof e.w?e.w:1}n.prototype.conjugate=function(){this.x*=-1,this.y*=-1,this.z*=-1},n.prototype.norm=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},n.prototype.normalize=function(){var e=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);0===e?(this.x=0,this.y=0,this.z=0,this.w=1):(e=1/e,this.x=this.x*e,this.y=this.y*e,this.z=this.z*e,this.w=this.w*e)},n.prototype.invert=function(){this.conjugate(),this.normalize()},n.prototype.multiply=function(e){var t=this.x*e.w+this.y*e.z-this.z*e.y+this.w*e.x,n=-this.x*e.z+this.y*e.w+this.z*e.x+this.w*e.y,i=this.x*e.y-this.y*e.x+this.z*e.w+this.w*e.z,r=-this.x*e.x-this.y*e.y-this.z*e.z+this.w*e.w;this.x=t,this.y=n,this.z=i,this.w=r},n.prototype.clone=function(){return new n(this)},e.exports=n},function(e,t,n){var i=n(0).EventEmitter2,r=n(3);function o(e){e=e||{},this.ros=e.ros,this.name=e.name,this.messageType=e.messageType,this.isAdvertised=!1,this.compression=e.compression||"none",this.throttle_rate=e.throttle_rate||0,this.latch=e.latch||!1,this.queue_size=e.queue_size||100,this.queue_length=e.queue_length||0,this.reconnect_on_close=e.reconnect_on_close||!0,this.compression&&"png"!==this.compression&&"none"!==this.compression&&this.emit("warning",this.compression+" compression is not supported. No compression will be used."),this.throttle_rate<0&&(this.emit("warning",this.throttle_rate+" is not allowed. Set to 0"),this.throttle_rate=0);var t=this;this.reconnect_on_close?this.callForSubscribeAndAdvertise=function(e){t.ros.callOnConnection(e),t.waitForReconnect=!1,t.reconnectFunc=function(){t.waitForReconnect||(t.waitForReconnect=!0,t.ros.callOnConnection(e),t.ros.once("connection",function(){t.waitForReconnect=!1}))},t.ros.on("close",t.reconnectFunc)}:this.callForSubscribeAndAdvertise=this.ros.callOnConnection,this._messageCallback=function(e){t.emit("message",new r(e))}}o.prototype.__proto__=i.prototype,o.prototype.subscribe=function(e){"function"==typeof e&&this.on("message",e),this.subscribeId||(this.ros.on(this.name,this._messageCallback),this.subscribeId="subscribe:"+this.name+":"+ ++this.ros.idCounter,this.callForSubscribeAndAdvertise({op:"subscribe",id:this.subscribeId,type:this.messageType,topic:this.name,compression:this.compression,throttle_rate:this.throttle_rate,queue_length:this.queue_length}))},o.prototype.unsubscribe=function(e){e&&(this.off("message",e),this.listeners("message").length)||this.subscribeId&&(this.ros.off(this.name,this._messageCallback),this.reconnect_on_close&&this.ros.off("close",this.reconnectFunc),this.emit("unsubscribe"),this.ros.callOnConnection({op:"unsubscribe",id:this.subscribeId,topic:this.name}),this.subscribeId=null)},o.prototype.advertise=function(){if(!this.isAdvertised&&(this.advertiseId="advertise:"+this.name+":"+ ++this.ros.idCounter,this.callForSubscribeAndAdvertise({op:"advertise",id:this.advertiseId,type:this.messageType,topic:this.name,latch:this.latch,queue_size:this.queue_size}),this.isAdvertised=!0,!this.reconnect_on_close)){var e=this;this.ros.on("close",function(){e.isAdvertised=!1})}},o.prototype.unadvertise=function(){this.isAdvertised&&(this.reconnect_on_close&&this.ros.off("close",this.reconnectFunc),this.emit("unadvertise"),this.ros.callOnConnection({op:"unadvertise",id:this.advertiseId,topic:this.name}),this.isAdvertised=!1)},o.prototype.publish=function(e){this.isAdvertised||this.advertise(),this.ros.idCounter++;var t={op:"publish",id:"publish:"+this.name+":"+this.ros.idCounter,topic:this.name,msg:e,latch:this.latch};this.ros.callOnConnection(t)},e.exports=o},function(e,t,n){var i=n(27),r=(n(5),n(0).EventEmitter2);function o(e){e=e||{},this.ros=e.ros,this.name=e.name,this.serviceType=e.serviceType,this.isAdvertised=!1,this._serviceCallback=null}o.prototype.__proto__=r.prototype,o.prototype.callService=function(e,t,n){if(!this.isAdvertised){var r="call_service:"+this.name+":"+ ++this.ros.idCounter;(t||n)&&this.ros.once(r,function(e){void 0!==e.result&&!1===e.result?"function"==typeof n&&n(e.values):"function"==typeof t&&t(new i(e.values))});var o={op:"call_service",id:r,service:this.name,args:e};this.ros.callOnConnection(o)}},o.prototype.advertise=function(e){this.isAdvertised||"function"!=typeof e||(this._serviceCallback=e,this.ros.on(this.name,this._serviceResponse.bind(this)),this.ros.callOnConnection({op:"advertise_service",type:this.serviceType,service:this.name}),this.isAdvertised=!0)},o.prototype.unadvertise=function(){this.isAdvertised&&(this.ros.callOnConnection({op:"unadvertise_service",service:this.name}),this.isAdvertised=!1)},o.prototype._serviceResponse=function(e){var t={},n=this._serviceCallback(e.args,t),r={op:"service_response",service:this.name,values:new i(t),result:n};e.id&&(r.id=e.id),this.ros.callOnConnection(r)},e.exports=o},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var i=n(21);function r(e){this.textureFilename=null,this.color=null,this.name=e.xml.getAttribute("name");var t=e.xml.getElementsByTagName("texture");t.length>0&&(this.textureFilename=t[0].getAttribute("filename"));var n=e.xml.getElementsByTagName("color");n.length>0&&(this.color=new i({xml:n[0]}))}r.prototype.isLink=function(){return null===this.color&&null===this.textureFilename};var o=n(1);r.prototype.assign=function(e){return o(this,e)},e.exports=r},function(e,t,n){var i=n(28),r=n(45),o=n(9),s=n(5),a=n(1),l=n(0).EventEmitter2;function c(e){e=e||{},this.socket=null,this.idCounter=0,this.isConnected=!1,this.transportLibrary=e.transportLibrary||"websocket",this.transportOptions=e.transportOptions||{},void 0===e.groovyCompatibility?this.groovyCompatibility=!0:this.groovyCompatibility=e.groovyCompatibility,this.setMaxListeners(0),e.url&&this.connect(e.url)}c.prototype.__proto__=l.prototype,c.prototype.connect=function(e){"socket.io"===this.transportLibrary?(this.socket=a(io(e,{"force new connection":!0}),r(this)),this.socket.on("connect",this.socket.onopen),this.socket.on("data",this.socket.onmessage),this.socket.on("close",this.socket.onclose),this.socket.on("error",this.socket.onerror)):"RTCPeerConnection"===this.transportLibrary.constructor.name?this.socket=a(this.transportLibrary.createDataChannel(e,this.transportOptions),r(this)):this.socket=a(new i(e),r(this))},c.prototype.close=function(){this.socket&&this.socket.close()},c.prototype.authenticate=function(e,t,n,i,r,o,s){var a={op:"auth",mac:e,client:t,dest:n,rand:i,t:r,level:o,end:s};this.callOnConnection(a)},c.prototype.callOnConnection=function(e){var t=this,n=JSON.stringify(e),i=null;i="socket.io"===this.transportLibrary?function(e){t.socket.emit("operation",e)}:function(e){t.socket.send(e)},this.isConnected?i(n):t.once("connection",function(){i(n)})},c.prototype.setStatusLevel=function(e,t){var n={op:"set_level",level:e,id:t};this.callOnConnection(n)},c.prototype.getActionServers=function(e,t){var n=new o({ros:this,name:"/rosapi/action_servers",serviceType:"rosapi/GetActionServers"}),i=new s({});"function"==typeof t?n.callService(i,function(t){e(t.action_servers)},function(e){t(e)}):n.callService(i,function(t){e(t.action_servers)})},c.prototype.getTopics=function(e,t){var n=new o({ros:this,name:"/rosapi/topics",serviceType:"rosapi/Topics"}),i=new s;"function"==typeof t?n.callService(i,function(t){e(t)},function(e){t(e)}):n.callService(i,function(t){e(t)})},c.prototype.getTopicsForType=function(e,t,n){var i=new o({ros:this,name:"/rosapi/topics_for_type",serviceType:"rosapi/TopicsForType"}),r=new s({type:e});"function"==typeof n?i.callService(r,function(e){t(e.topics)},function(e){n(e)}):i.callService(r,function(e){t(e.topics)})},c.prototype.getServices=function(e,t){var n=new o({ros:this,name:"/rosapi/services",serviceType:"rosapi/Services"}),i=new s;"function"==typeof t?n.callService(i,function(t){e(t.services)},function(e){t(e)}):n.callService(i,function(t){e(t.services)})},c.prototype.getServicesForType=function(e,t,n){var i=new o({ros:this,name:"/rosapi/services_for_type",serviceType:"rosapi/ServicesForType"}),r=new s({type:e});"function"==typeof n?i.callService(r,function(e){t(e.services)},function(e){n(e)}):i.callService(r,function(e){t(e.services)})},c.prototype.getServiceRequestDetails=function(e,t,n){var i=new o({ros:this,name:"/rosapi/service_request_details",serviceType:"rosapi/ServiceRequestDetails"}),r=new s({type:e});"function"==typeof n?i.callService(r,function(e){t(e)},function(e){n(e)}):i.callService(r,function(e){t(e)})},c.prototype.getServiceResponseDetails=function(e,t,n){var i=new o({ros:this,name:"/rosapi/service_response_details",serviceType:"rosapi/ServiceResponseDetails"}),r=new s({type:e});"function"==typeof n?i.callService(r,function(e){t(e)},function(e){n(e)}):i.callService(r,function(e){t(e)})},c.prototype.getNodes=function(e,t){var n=new o({ros:this,name:"/rosapi/nodes",serviceType:"rosapi/Nodes"}),i=new s;"function"==typeof t?n.callService(i,function(t){e(t.nodes)},function(e){t(e)}):n.callService(i,function(t){e(t.nodes)})},c.prototype.getNodeDetails=function(e,t,n){var i=new o({ros:this,name:"/rosapi/node_details",serviceType:"rosapi/NodeDetails"}),r=new s({node:e});"function"==typeof n?i.callService(r,function(e){t(e.subscribing,e.publishing,e.services)},function(e){n(e)}):i.callService(r,function(e){t(e)})},c.prototype.getParams=function(e,t){var n=new o({ros:this,name:"/rosapi/get_param_names",serviceType:"rosapi/GetParamNames"}),i=new s;"function"==typeof t?n.callService(i,function(t){e(t.names)},function(e){t(e)}):n.callService(i,function(t){e(t.names)})},c.prototype.getTopicType=function(e,t,n){var i=new o({ros:this,name:"/rosapi/topic_type",serviceType:"rosapi/TopicType"}),r=new s({topic:e});"function"==typeof n?i.callService(r,function(e){t(e.type)},function(e){n(e)}):i.callService(r,function(e){t(e.type)})},c.prototype.getServiceType=function(e,t,n){var i=new o({ros:this,name:"/rosapi/service_type",serviceType:"rosapi/ServiceType"}),r=new s({service:e});"function"==typeof n?i.callService(r,function(e){t(e.type)},function(e){n(e)}):i.callService(r,function(e){t(e.type)})},c.prototype.getMessageDetails=function(e,t,n){var i=new o({ros:this,name:"/rosapi/message_details",serviceType:"rosapi/MessageDetails"}),r=new s({type:e});"function"==typeof n?i.callService(r,function(e){t(e.typedefs)},function(e){n(e)}):i.callService(r,function(e){t(e.typedefs)})},c.prototype.decodeTypeDefs=function(e){var t=this,n=function(e,i){for(var r={},o=0;o<e.fieldnames.length;o++){var s=e.fieldarraylen[o],a=e.fieldnames[o],l=e.fieldtypes[o];if(-1===l.indexOf("/"))r[a]=-1===s?l:[l];else{for(var c=!1,u=0;u<i.length;u++)if(i[u].type.toString()===l.toString()){c=i[u];break}if(c){var p=n(c,i);-1===s||(r[a]=[p])}else t.emit("error","Cannot find "+l+" in decodeTypeDefs")}}return r};return n(e[0],e)},e.exports=c},function(e,t){e.exports=function(e,t,n){t.forEach(function(t){var i=n[t];e.prototype[t]=function(e){return e.ros=this,new i(e)}})}},function(e,t,n){var i=this.ROSLIB||{REVISION:"0.20.0"},r=n(1);r(i,n(46)),r(i,n(41)),r(i,n(38)),r(i,n(37)),r(i,n(35)),e.exports=i},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.setRosStatus=l,t.addMessage=function(t,n){for(var i=e("[topic="+t.substr(1)+"]"),r=0;r<i.length;r++){var o=i[r].find(".output")[0];console.log(o),o.html+=JSON.stringify(n)+"</br>"}},t.getTopics=function(){var e=new s.default.Service({ros:a,name:"/rosapi/topics",serviceType:"rosapi/Topics"}),n=new s.default.ServiceRequest;e.callService(n,function(e){t.topics=r=e.topics,t.types=o=e.types;var n=document.getElementById("topics");n.innerHTML="";for(var i=0;i<r.length;i++){var s=document.createElement("option");s.value=r[i],s.text=r[i],n.appendChild(s)}})},t.ros=t.types=t.topics=void 0;var i,r,o,s=(i=n(14))&&i.__esModule?i:{default:i};t.types=o,t.topics=r;var a=new s.default.Ros({url:"ws://192.168.1.11:9090"});function l(e){document.getElementById("ros-status").innerHTML=e?'<i class="fa fa-server green" aria-hidden="true"></i>':'<i class="fa fa-server red" aria-hidden="true"></i>'}t.ros=a,a.on("connection",function(){l(!0)}),a.on("error",function(e){l(!1)}),a.on("close",function(){console.log("Connection to websocket server closed.")}),e(document).on("submit",".publishForm",function(t){t.preventDefault();var n={};e(this).serializeArray().map(function(e){n[e.name]=e.value});var i=new s.default.Topic({ros:a,name:n.topic,messageType:n.msg_type}),r={};r.data=n.pub,i.publish(r)})}).call(this,n(6))},function(e,t,n){var i=n(4);e.exports=function(e){this.type=i.URDF_SPHERE,this.radius=parseFloat(e.xml.getAttribute("radius"))}},function(e,t,n){var i=n(2),r=n(4);e.exports=function(e){this.scale=null,this.type=r.URDF_MESH,this.filename=e.xml.getAttribute("filename");var t=e.xml.getAttribute("scale");if(t){var n=t.split(" ");this.scale=new i({x:parseFloat(n[0]),y:parseFloat(n[1]),z:parseFloat(n[2])})}}},function(e,t,n){var i=n(24),r=n(2),o=n(7),s=n(20),a=n(22),l=n(11),c=n(17),u=n(16);e.exports=function(e){var t=e.xml;this.origin=null,this.geometry=null,this.material=null;var n=t.getElementsByTagName("origin");if(0===n.length)this.origin=new i;else{var p=n[0].getAttribute("xyz"),f=new r;p&&(p=p.split(" "),f=new r({x:parseFloat(p[0]),y:parseFloat(p[1]),z:parseFloat(p[2])}));var d=n[0].getAttribute("rpy"),h=new o;if(d){d=d.split(" ");var g=parseFloat(d[0])/2,m=parseFloat(d[1])/2,v=parseFloat(d[2])/2,y=Math.sin(g)*Math.cos(m)*Math.cos(v)-Math.cos(g)*Math.sin(m)*Math.sin(v),b=Math.cos(g)*Math.sin(m)*Math.cos(v)+Math.sin(g)*Math.cos(m)*Math.sin(v),x=Math.cos(g)*Math.cos(m)*Math.sin(v)-Math.sin(g)*Math.sin(m)*Math.cos(v),_=Math.cos(g)*Math.cos(m)*Math.cos(v)+Math.sin(g)*Math.sin(m)*Math.sin(v);(h=new o({x:y,y:b,z:x,w:_})).normalize()}this.origin=new i({position:f,orientation:h})}var w=t.getElementsByTagName("geometry");if(w.length>0){for(var E=w[0],T=null,C=0;C<E.childNodes.length;C++){var S=E.childNodes[C];if(1===S.nodeType){T=S;break}}var A=T.nodeName;"sphere"===A?this.geometry=new u({xml:T}):"box"===A?this.geometry=new a({xml:T}):"cylinder"===A?this.geometry=new s({xml:T}):"mesh"===A?this.geometry=new c({xml:T}):console.warn("Unknown geometry type "+A)}var D=t.getElementsByTagName("material");D.length>0&&(this.material=new l({xml:D[0]}))}},function(e,t,n){var i=n(18);e.exports=function(e){this.name=e.xml.getAttribute("name"),this.visuals=[];for(var t=e.xml.getElementsByTagName("visual"),n=0;n<t.length;n++)this.visuals.push(new i({xml:t[n]}))}},function(e,t,n){var i=n(4);e.exports=function(e){this.type=i.URDF_CYLINDER,this.length=parseFloat(e.xml.getAttribute("length")),this.radius=parseFloat(e.xml.getAttribute("radius"))}},function(e,t){e.exports=function(e){var t=e.xml.getAttribute("rgba").split(" ");this.r=parseFloat(t[0]),this.g=parseFloat(t[1]),this.b=parseFloat(t[2]),this.a=parseFloat(t[3])}},function(e,t,n){var i=n(2),r=n(4);e.exports=function(e){this.dimension=null,this.type=r.URDF_BOX;var t=e.xml.getAttribute("size").split(" ");this.dimension=new i({x:parseFloat(t[0]),y:parseFloat(t[1]),z:parseFloat(t[2])})}},function(e,t,n){var i=n(2),r=n(7);function o(e){e=e||{},this.translation=new i(e.translation),this.rotation=new r(e.rotation)}o.prototype.clone=function(){return new o(this)},e.exports=o},function(e,t,n){var i=n(2),r=n(7);function o(e){e=e||{},this.position=new i(e.position),this.orientation=new r(e.orientation)}o.prototype.applyTransform=function(e){this.position.multiplyQuaternion(e.rotation),this.position.add(e.translation);var t=e.rotation.clone();t.multiply(this.orientation),this.orientation=t},o.prototype.clone=function(){return new o(this)},e.exports=o},function(e,t,n){var i=n(3),r=n(0).EventEmitter2;function o(e){var t=this;this.actionClient=e.actionClient,this.goalMessage=e.goalMessage,this.isFinished=!1;var n=new Date;this.goalID="goal_"+Math.random()+"_"+n.getTime(),this.goalMessage=new i({goal_id:{stamp:{secs:0,nsecs:0},id:this.goalID},goal:this.goalMessage}),this.on("status",function(e){t.status=e}),this.on("result",function(e){t.isFinished=!0,t.result=e}),this.on("feedback",function(e){t.feedback=e}),this.actionClient.goals[this.goalID]=this}o.prototype.__proto__=r.prototype,o.prototype.send=function(e){var t=this;t.actionClient.goalTopic.publish(t.goalMessage),e&&setTimeout(function(){t.isFinished||t.emit("timeout")},e)},o.prototype.cancel=function(){var e=new i({id:this.goalID});this.actionClient.cancelTopic.publish(e)},e.exports=o},function(e,t,n){var i=n(8),r=n(3),o=n(0).EventEmitter2;function s(e){var t=this;e=e||{},this.ros=e.ros,this.serverName=e.serverName,this.actionName=e.actionName,this.timeout=e.timeout,this.omitFeedback=e.omitFeedback,this.omitStatus=e.omitStatus,this.omitResult=e.omitResult,this.goals={};var n=!1;this.feedbackListener=new i({ros:this.ros,name:this.serverName+"/feedback",messageType:this.actionName+"Feedback"}),this.statusListener=new i({ros:this.ros,name:this.serverName+"/status",messageType:"actionlib_msgs/GoalStatusArray"}),this.resultListener=new i({ros:this.ros,name:this.serverName+"/result",messageType:this.actionName+"Result"}),this.goalTopic=new i({ros:this.ros,name:this.serverName+"/goal",messageType:this.actionName+"Goal"}),this.cancelTopic=new i({ros:this.ros,name:this.serverName+"/cancel",messageType:"actionlib_msgs/GoalID"}),this.goalTopic.advertise(),this.cancelTopic.advertise(),this.omitStatus||this.statusListener.subscribe(function(e){n=!0,e.status_list.forEach(function(e){var n=t.goals[e.goal_id.id];n&&n.emit("status",e)})}),this.omitFeedback||this.feedbackListener.subscribe(function(e){var n=t.goals[e.status.goal_id.id];n&&(n.emit("status",e.status),n.emit("feedback",e.feedback))}),this.omitResult||this.resultListener.subscribe(function(e){var n=t.goals[e.status.goal_id.id];n&&(n.emit("status",e.status),n.emit("result",e.result))}),this.timeout&&setTimeout(function(){n||t.emit("timeout")},this.timeout)}s.prototype.__proto__=o.prototype,s.prototype.cancel=function(){var e=new r;this.cancelTopic.publish(e)},s.prototype.dispose=function(){this.goalTopic.unadvertise(),this.cancelTopic.unadvertise(),this.omitStatus||this.statusListener.unsubscribe(),this.omitFeedback||this.feedbackListener.unsubscribe(),this.omitResult||this.resultListener.unsubscribe()},e.exports=s},function(e,t,n){var i=n(1);e.exports=function(e){i(this,e)}},function(e,t,n){(function(t){e.exports=t.WebSocket}).call(this,n(10))},function(e,t,n){"use strict";(function(e){var t=n(15),i=document.getElementById("topics");i.addEventListener("change",function(){var n=i.selectedIndex;e("#msg_type").val(t.types[n]),console.log(t.types[n],n)})}).call(this,n(6))},function(e,t,n){var i;e.exports=function e(t,n,r){function o(a,l){if(!n[a]){if(!t[a]){var c="function"==typeof i&&i;if(!l&&c)return i(a,!0);if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var p=n[a]={exports:{}};t[a][0].call(p.exports,function(e){var n=t[a][1][e];return o(n||e)},p,p.exports,e,t,n,r)}return n[a].exports}for(var s="function"==typeof i&&i,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){"use strict";"undefined"==typeof window?t.exports=function(t){return e("./src/utils/window").init(t),e("./src/index")}:t.exports=e("./src/index")},{"./src/index":19,"./src/utils/window":52}],2:[function(e,t,n){"use strict";var i=e("./utils/extend.js");function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];if(e.immediatePropagationStopped)break;i(e)}}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=i({},t||{})}return e.prototype.fire=function(e){var t=void 0,n="on"+e.type,i=this.global;(t=this[e.type])&&r(e,t),this[n]&&this[n](e),!e.propagationStopped&&i&&(t=i[e.type])&&r(e,t)},e.prototype.on=function(e,t){this[e]?this[e].push(t):this[e]=[t]},e.prototype.off=function(e,t){var n=this[e],i=n?n.indexOf(t):-1;-1!==i&&n.splice(i,1),(n&&0===n.length||!t)&&(this[e]=void 0)},e}();t.exports=o},{"./utils/extend.js":41}],3:[function(e,t,n){"use strict";var i=e("./utils/extend"),r=e("./utils/getOriginXY"),o=e("./defaultOptions"),s=e("./utils/Signals").new(),a=function(){function e(t,n,a,l,c,u){var p=arguments.length>6&&void 0!==arguments[6]&&arguments[6];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var f=t.target,d=(f&&f.options||o).deltaSource,h=r(f,c,a),g="start"===l,m="end"===l,v=g?t.startCoords:t.curCoords,y=t.prevEvent;c=c||t.element;var b=i({},v.page),x=i({},v.client);b.x-=h.x,b.y-=h.y,x.x-=h.x,x.y-=h.y,this.ctrlKey=n.ctrlKey,this.altKey=n.altKey,this.shiftKey=n.shiftKey,this.metaKey=n.metaKey,this.button=n.button,this.buttons=n.buttons,this.target=c,this.currentTarget=c,this.relatedTarget=u||null,this.preEnd=p,this.type=a+(l||""),this.interaction=t,this.interactable=f,this.t0=g?t.downTimes[t.downTimes.length-1]:y.t0;var _={interaction:t,event:n,action:a,phase:l,element:c,related:u,page:b,client:x,coords:v,starting:g,ending:m,deltaSource:d,iEvent:this};s.fire("set-xy",_),m?(this.pageX=y.pageX,this.pageY=y.pageY,this.clientX=y.clientX,this.clientY=y.clientY):(this.pageX=b.x,this.pageY=b.y,this.clientX=x.x,this.clientY=x.y),this.x0=t.startCoords.page.x-h.x,this.y0=t.startCoords.page.y-h.y,this.clientX0=t.startCoords.client.x-h.x,this.clientY0=t.startCoords.client.y-h.y,s.fire("set-delta",_),this.timeStamp=v.timeStamp,this.dt=t.pointerDelta.timeStamp,this.duration=this.timeStamp-this.t0,this.speed=t.pointerDelta[d].speed,this.velocityX=t.pointerDelta[d].vx,this.velocityY=t.pointerDelta[d].vy,this.swipe=m||"inertiastart"===l?this.getSwipe():null,s.fire("new",_)}return e.prototype.getSwipe=function(){var e=this.interaction;if(e.prevEvent.speed<600||this.timeStamp-e.prevEvent.timeStamp>150)return null;var t=180*Math.atan2(e.prevEvent.velocityY,e.prevEvent.velocityX)/Math.PI;t<0&&(t+=360);var n=112.5<=t&&t<247.5,i=202.5<=t&&t<337.5,r=!n&&(292.5<=t||t<67.5),o=!i&&22.5<=t&&t<157.5;return{up:i,down:o,left:n,right:r,angle:t,speed:e.prevEvent.speed,velocity:{x:e.prevEvent.velocityX,y:e.prevEvent.velocityY}}},e.prototype.preventDefault=function(){},e.prototype.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},e.prototype.stopPropagation=function(){this.propagationStopped=!0},e}();s.on("set-delta",function(e){var t=e.iEvent,n=e.interaction,i=e.starting,r=e.deltaSource,o=i?t:n.prevEvent;"client"===r?(t.dx=t.clientX-o.clientX,t.dy=t.clientY-o.clientY):(t.dx=t.pageX-o.pageX,t.dy=t.pageY-o.pageY)}),a.signals=s,t.exports=a},{"./defaultOptions":18,"./utils/Signals":34,"./utils/extend":41,"./utils/getOriginXY":42}],4:[function(e,t,n){"use strict";var i=e("./utils/clone"),r=e("./utils/is"),o=e("./utils/events"),s=e("./utils/extend"),a=e("./actions/base"),l=e("./scope"),c=e("./Eventable"),u=e("./defaultOptions"),p=e("./utils/Signals").new(),f=e("./utils/domUtils"),d=f.getElementRect,h=f.nodeContains,g=f.trySelector,m=f.matchesSelector,v=e("./utils/window"),y=v.getWindow,b=e("./utils/arr"),x=b.contains,_=e("./utils/browser"),w=_.wheelEvent;l.interactables=[];var E=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=n||{},this.target=t,this.events=new c,this._context=n.context||l.document,this._win=y(g(t)?this._context:t),this._doc=this._win.document,p.fire("new",{target:t,options:n,interactable:this,win:this._win}),l.addDocument(this._doc,this._win),l.interactables.push(this),this.set(n)}return e.prototype.setOnEvents=function(e,t){var n="on"+e;return r.function(t.onstart)&&(this.events[n+"start"]=t.onstart),r.function(t.onmove)&&(this.events[n+"move"]=t.onmove),r.function(t.onend)&&(this.events[n+"end"]=t.onend),r.function(t.oninertiastart)&&(this.events[n+"inertiastart"]=t.oninertiastart),this},e.prototype.setPerAction=function(e,t){for(var n in t)n in u[e]&&(r.object(t[n])?(this.options[e][n]=i(this.options[e][n]||{}),s(this.options[e][n],t[n]),r.object(u.perAction[n])&&"enabled"in u.perAction[n]&&(this.options[e][n].enabled=!1!==t[n].enabled)):r.bool(t[n])&&r.object(u.perAction[n])?this.options[e][n].enabled=t[n]:void 0!==t[n]&&(this.options[e][n]=t[n]))},e.prototype.getRect=function(e){return e=e||this.target,r.string(this.target)&&!r.element(e)&&(e=this._context.querySelector(this.target)),d(e)},e.prototype.rectChecker=function(e){return r.function(e)?(this.getRect=e,this):null===e?(delete this.options.getRect,this):this.getRect},e.prototype._backCompatOption=function(e,t){if(g(t)||r.object(t)){this.options[e]=t;for(var n=0;n<a.names.length;n++){var i=a.names[n];this.options[i][e]=t}return this}return this.options[e]},e.prototype.origin=function(e){return this._backCompatOption("origin",e)},e.prototype.deltaSource=function(e){return"page"===e||"client"===e?(this.options.deltaSource=e,this):this.options.deltaSource},e.prototype.context=function(){return this._context},e.prototype.inContext=function(e){return this._context===e.ownerDocument||h(this._context,e)},e.prototype.fire=function(e){return this.events.fire(e),this},e.prototype._onOffMultiple=function(e,t,n,i){if(r.string(t)&&-1!==t.search(" ")&&(t=t.trim().split(/ +/)),r.array(t)){for(var o=0;o<t.length;o++){var s=t[o];this[e](s,n,i)}return!0}if(r.object(t)){for(var a in t)this[e](a,t[a],n);return!0}},e.prototype.on=function(t,n,i){return this._onOffMultiple("on",t,n,i)?this:("wheel"===t&&(t=w),x(e.eventTypes,t)?this.events.on(t,n):r.string(this.target)?o.addDelegate(this.target,this._context,t,n,i):o.add(this.target,t,n,i),this)},e.prototype.off=function(t,n,i){return this._onOffMultiple("off",t,n,i)?this:("wheel"===t&&(t=w),x(e.eventTypes,t)?this.events.off(t,n):r.string(this.target)?o.removeDelegate(this.target,this._context,t,n,i):o.remove(this.target,t,n,i),this)},e.prototype.set=function(t){r.object(t)||(t={}),this.options=i(u.base);var n=i(u.perAction);for(var o in a.methodDict){var s=a.methodDict[o];this.options[o]=i(u[o]),this.setPerAction(o,n),this[s](t[o])}for(var l=0;l<e.settingsMethods.length;l++){var c=e.settingsMethods[l];this.options[c]=u.base[c],c in t&&this[c](t[c])}return p.fire("set",{options:t,interactable:this}),this},e.prototype.unset=function(){if(o.remove(this.target,"all"),r.string(this.target))for(var e in o.delegatedEvents){var t=o.delegatedEvents[e];t.selectors[0]===this.target&&t.contexts[0]===this._context&&(t.selectors.splice(0,1),t.contexts.splice(0,1),t.listeners.splice(0,1),t.selectors.length||(t[e]=null)),o.remove(this._context,e,o.delegateListener),o.remove(this._context,e,o.delegateUseCapture,!0)}else o.remove(this,"all");p.fire("unset",{interactable:this}),l.interactables.splice(l.interactables.indexOf(this),1);for(var n=0;n<(l.interactions||[]).length;n++){var i=(l.interactions||[])[n];i.target===this&&i.interacting()&&!i._ending&&i.stop()}return l.interact},e}();l.interactables.indexOfElement=function(e,t){t=t||l.document;for(var n=0;n<this.length;n++){var i=this[n];if(i.target===e&&i._context===t)return n}return-1},l.interactables.get=function(e,t,n){var i=this[this.indexOfElement(e,t&&t.context)];return i&&(r.string(e)||n||i.inContext(e))?i:null},l.interactables.forEachMatch=function(e,t){for(var n=0;n<this.length;n++){var i=this[n],o=void 0;if((r.string(i.target)?r.element(e)&&m(e,i.target):e===i.target)&&i.inContext(e)&&(o=t(i)),void 0!==o)return o}},E.eventTypes=l.eventTypes=[],E.signals=p,E.settingsMethods=["deltaSource","origin","preventDefault","rectChecker"],t.exports=E},{"./Eventable":2,"./actions/base":6,"./defaultOptions":18,"./scope":33,"./utils/Signals":34,"./utils/arr":35,"./utils/browser":36,"./utils/clone":37,"./utils/domUtils":39,"./utils/events":40,"./utils/extend":41,"./utils/is":46,"./utils/window":52}],5:[function(e,t,n){"use strict";var i=e("./scope"),r=e("./utils"),o=e("./utils/events"),s=e("./utils/browser"),a=e("./utils/domObjects"),l=e("./utils/interactionFinder"),c=e("./utils/Signals").new(),u={},p=["pointerDown","pointerMove","pointerUp","updatePointer","removePointer"],f=0;i.interactions=[];for(var d=function(){function e(t){var n=t.pointerType;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.target=null,this.element=null,this.prepared={name:null,axis:null,edges:null},this.pointers=[],this.pointerIds=[],this.downTargets=[],this.downTimes=[],this.prevCoords={page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},this.curCoords={page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},this.startCoords={page:{x:0,y:0},client:{x:0,y:0},timeStamp:0},this.pointerDelta={page:{x:0,y:0,vx:0,vy:0,speed:0},client:{x:0,y:0,vx:0,vy:0,speed:0},timeStamp:0},this.downEvent=null,this.downPointer={},this._eventTarget=null,this._curEventTarget=null,this.prevEvent=null,this.pointerIsDown=!1,this.pointerWasMoved=!1,this._interacting=!1,this._ending=!1,this.pointerType=n,c.fire("new",this),i.interactions.push(this)}return e.prototype.pointerDown=function(e,t,n){var i=this.updatePointer(e,t,!0);c.fire("down",{pointer:e,event:t,eventTarget:n,pointerIndex:i,interaction:this})},e.prototype.start=function(e,t,n){this.interacting()||!this.pointerIsDown||this.pointerIds.length<("gesture"===e.name?2:1)||(-1===i.interactions.indexOf(this)&&i.interactions.push(this),r.copyAction(this.prepared,e),this.target=t,this.element=n,c.fire("action-start",{interaction:this,event:this.downEvent}))},e.prototype.pointerMove=function(t,n,i){this.simulation||(this.updatePointer(t),r.setCoords(this.curCoords,this.pointers));var o=this.curCoords.page.x===this.prevCoords.page.x&&this.curCoords.page.y===this.prevCoords.page.y&&this.curCoords.client.x===this.prevCoords.client.x&&this.curCoords.client.y===this.prevCoords.client.y,s=void 0,a=void 0;this.pointerIsDown&&!this.pointerWasMoved&&(s=this.curCoords.client.x-this.startCoords.client.x,a=this.curCoords.client.y-this.startCoords.client.y,this.pointerWasMoved=r.hypot(s,a)>e.pointerMoveTolerance);var l={pointer:t,pointerIndex:this.getPointerIndex(t),event:n,eventTarget:i,dx:s,dy:a,duplicate:o,interaction:this,interactingBeforeMove:this.interacting()};o||r.setCoordDeltas(this.pointerDelta,this.prevCoords,this.curCoords),c.fire("move",l),o||(this.interacting()&&this.doMove(l),this.pointerWasMoved&&r.copyCoords(this.prevCoords,this.curCoords))},e.prototype.doMove=function(e){e=r.extend({pointer:this.pointers[0],event:this.prevEvent,eventTarget:this._eventTarget,interaction:this},e||{}),c.fire("before-action-move",e),this._dontFireMove||c.fire("action-move",e),this._dontFireMove=!1},e.prototype.pointerUp=function(e,t,n,i){var r=this.getPointerIndex(e);c.fire(/cancel$/i.test(t.type)?"cancel":"up",{pointer:e,pointerIndex:r,event:t,eventTarget:n,curEventTarget:i,interaction:this}),this.simulation||this.end(t),this.pointerIsDown=!1,this.removePointer(e,t)},e.prototype.end=function(e){this._ending=!0,e=e||this.prevEvent,this.interacting()&&c.fire("action-end",{event:e,interaction:this}),this.stop(),this._ending=!1},e.prototype.currentAction=function(){return this._interacting?this.prepared.name:null},e.prototype.interacting=function(){return this._interacting},e.prototype.stop=function(){c.fire("stop",{interaction:this}),this._interacting&&(c.fire("stop-active",{interaction:this}),c.fire("stop-"+this.prepared.name,{interaction:this})),this.target=this.element=null,this._interacting=!1,this.prepared.name=this.prevEvent=null},e.prototype.getPointerIndex=function(e){return"mouse"===this.pointerType||"pen"===this.pointerType?0:this.pointerIds.indexOf(r.getPointerId(e))},e.prototype.updatePointer=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t&&/(down|start)$/i.test(t.type),i=r.getPointerId(e),o=this.getPointerIndex(e);return-1===o&&(o=this.pointerIds.length,this.pointerIds[o]=i),n&&c.fire("update-pointer-down",{pointer:e,event:t,down:n,pointerId:i,pointerIndex:o,interaction:this}),this.pointers[o]=e,o},e.prototype.removePointer=function(e,t){var n=this.getPointerIndex(e);-1!==n&&(c.fire("remove-pointer",{pointer:e,event:t,pointerIndex:n,interaction:this}),this.pointers.splice(n,1),this.pointerIds.splice(n,1),this.downTargets.splice(n,1),this.downTimes.splice(n,1))},e.prototype._updateEventTargets=function(e,t){this._eventTarget=e,this._curEventTarget=t},e}(),h=0;h<p.length;h++){var g=p[h];u[g]=m(g)}function m(e){return function(t){var n=r.getPointerType(t),o=r.getEventTargets(t),a=o[0],c=o[1],u=[];if(s.supportsTouch&&/touch/.test(t.type)){f=(new Date).getTime();for(var p=0;p<t.changedTouches.length;p++){var h=t.changedTouches[p],g=h,m=l.search(g,t.type,a);u.push([g,m||new d({pointerType:n})])}}else{var v=!1;if(!s.supportsPointerEvent&&/mouse/.test(t.type)){for(var y=0;y<i.interactions.length&&!v;y++)v="mouse"!==i.interactions[y].pointerType&&i.interactions[y].pointerIsDown;v=v||(new Date).getTime()-f<500||0===t.timeStamp}if(!v){var b=l.search(t,t.type,a);b||(b=new d({pointerType:n})),u.push([t,b])}}for(var x=0;x<u.length;x++){var _=u[x],w=_[0],E=_[1];E._updateEventTargets(a,c),E[e](w,t,a,c)}}}function v(e){for(var t=0;t<i.interactions.length;t++){var n=i.interactions[t];n.end(e),c.fire("endall",{event:e,interaction:n})}}var y={},b=s.pEventTypes;function x(e,t){var n=e.doc,r=0===t.indexOf("add")?o.add:o.remove;for(var a in i.delegatedEvents)r(n,a,o.delegateListener),r(n,a,o.delegateUseCapture,!0);for(var l in y)r(n,l,y[l],s.isIOS?{passive:!1}:void 0)}a.PointerEvent?(y[b.down]=u.pointerDown,y[b.move]=u.pointerMove,y[b.up]=u.pointerUp,y[b.cancel]=u.pointerUp):(y.mousedown=u.pointerDown,y.mousemove=u.pointerMove,y.mouseup=u.pointerUp,y.touchstart=u.pointerDown,y.touchmove=u.pointerMove,y.touchend=u.pointerUp,y.touchcancel=u.pointerUp),y.blur=v,c.on("update-pointer-down",function(e){var t=e.interaction,n=e.pointer,i=e.pointerId,o=e.pointerIndex,s=e.event,a=e.eventTarget,l=e.down;t.pointerIds[o]=i,t.pointers[o]=n,l&&(t.pointerIsDown=!0),t.interacting()||(r.setCoords(t.startCoords,t.pointers),r.copyCoords(t.curCoords,t.startCoords),r.copyCoords(t.prevCoords,t.startCoords),t.downEvent=s,t.downTimes[o]=t.curCoords.timeStamp,t.downTargets[o]=a||s&&r.getEventTargets(s)[0],t.pointerWasMoved=!1,r.pointerExtend(t.downPointer,n))}),i.signals.on("add-document",x),i.signals.on("remove-document",x),d.pointerMoveTolerance=1,d.doOnInteractions=m,d.endAll=v,d.signals=c,d.docEvents=y,i.endAllInteractions=v,t.exports=d},{"./scope":33,"./utils":44,"./utils/Signals":34,"./utils/browser":36,"./utils/domObjects":38,"./utils/events":40,"./utils/interactionFinder":45}],6:[function(e,t,n){"use strict";var i=e("../Interaction"),r=e("../InteractEvent"),o={firePrepared:s,names:[],methodDict:{}};function s(e,t,n,i){var o=e.prepared.name,s=new r(e,t,o,n,e.element,null,i);e.target.fire(s),e.prevEvent=s}i.signals.on("action-start",function(e){var t=e.interaction,n=e.event;t._interacting=!0,s(t,n,"start")}),i.signals.on("action-move",function(e){var t=e.interaction,n=e.event,i=e.preEnd;if(s(t,n,"move",i),!t.interacting())return!1}),i.signals.on("action-end",function(e){var t=e.interaction,n=e.event;s(t,n,"end")}),t.exports=o},{"../InteractEvent":3,"../Interaction":5}],7:[function(e,t,n){"use strict";var i=e("./base"),r=e("../utils"),o=e("../InteractEvent"),s=e("../Interactable"),a=e("../Interaction"),l=e("../defaultOptions"),c={defaults:{enabled:!1,mouseButtons:null,origin:null,snap:null,restrict:null,inertia:null,autoScroll:null,startAxis:"xy",lockAxis:"xy"},checker:function(e,t,n){var i=n.options.drag;return i.enabled?{name:"drag",axis:"start"===i.lockAxis?i.startAxis:i.lockAxis}:null},getCursor:function(){return"move"}};a.signals.on("before-action-move",function(e){var t=e.interaction;if("drag"===t.prepared.name){var n=t.prepared.axis;"x"===n?(t.curCoords.page.y=t.startCoords.page.y,t.curCoords.client.y=t.startCoords.client.y,t.pointerDelta.page.speed=Math.abs(t.pointerDelta.page.vx),t.pointerDelta.client.speed=Math.abs(t.pointerDelta.client.vx),t.pointerDelta.client.vy=0,t.pointerDelta.page.vy=0):"y"===n&&(t.curCoords.page.x=t.startCoords.page.x,t.curCoords.client.x=t.startCoords.client.x,t.pointerDelta.page.speed=Math.abs(t.pointerDelta.page.vy),t.pointerDelta.client.speed=Math.abs(t.pointerDelta.client.vy),t.pointerDelta.client.vx=0,t.pointerDelta.page.vx=0)}}),o.signals.on("new",function(e){var t=e.iEvent,n=e.interaction;if("dragmove"===t.type){var i=n.prepared.axis;"x"===i?(t.pageY=n.startCoords.page.y,t.clientY=n.startCoords.client.y,t.dy=0):"y"===i&&(t.pageX=n.startCoords.page.x,t.clientX=n.startCoords.client.x,t.dx=0)}}),s.prototype.draggable=function(e){return r.is.object(e)?(this.options.drag.enabled=!1!==e.enabled,this.setPerAction("drag",e),this.setOnEvents("drag",e),/^(xy|x|y|start)$/.test(e.lockAxis)&&(this.options.drag.lockAxis=e.lockAxis),/^(xy|x|y)$/.test(e.startAxis)&&(this.options.drag.startAxis=e.startAxis),this):r.is.bool(e)?(this.options.drag.enabled=e,e||(this.ondragstart=this.ondragstart=this.ondragend=null),this):this.options.drag},i.drag=c,i.names.push("drag"),r.merge(s.eventTypes,["dragstart","dragmove","draginertiastart","draginertiaresume","dragend"]),i.methodDict.drag="draggable",l.drag=c.defaults,t.exports=c},{"../InteractEvent":3,"../Interactable":4,"../Interaction":5,"../defaultOptions":18,"../utils":44,"./base":6}],8:[function(e,t,n){"use strict";var i=e("./base"),r=e("../utils"),o=e("../scope"),s=e("../interact"),a=e("../InteractEvent"),l=e("../Interactable"),c=e("../Interaction"),u=e("../defaultOptions"),p={defaults:{enabled:!1,accept:null,overlap:"pointer"}},f=!1;function d(e,t){for(var n=void 0,i=0;i<e.dropzones.length;i++){var r=e.dropzones[i],o=e.elements[i];o!==n&&(t.target=o,r.fire(t)),n=o}}function h(e,t){var n=function(e,t){for(var n=[],i=[],s=0;s<o.interactables.length;s++){var a=o.interactables[s];if(a.options.drop.enabled){var l=a.options.drop.accept;if(!(r.is.element(l)&&l!==t||r.is.string(l)&&!r.matchesSelector(t,l)))for(var c=r.is.string(a.target)?a._context.querySelectorAll(a.target):[a.target],u=0;u<c.length;u++){var p=c[u];p!==t&&(n.push(a),i.push(p))}}}return{elements:i,dropzones:n}}(0,t);e.dropzones=n.dropzones,e.elements=n.elements,e.rects=[];for(var i=0;i<e.dropzones.length;i++)e.rects[i]=e.dropzones[i].getRect(e.elements[i])}function g(e,t,n){var i={enter:null,leave:null,activate:null,deactivate:null,move:null,drop:null},o={dragEvent:n,interaction:e,target:e.dropElement,dropzone:e.dropTarget,relatedTarget:n.target,draggable:n.interactable,timeStamp:n.timeStamp};return e.dropElement!==e.prevDropElement&&(e.prevDropTarget&&(i.leave=r.extend({type:"dragleave"},o),n.dragLeave=i.leave.target=e.prevDropElement,n.prevDropzone=i.leave.dropzone=e.prevDropTarget),e.dropTarget&&(i.enter={dragEvent:n,interaction:e,target:e.dropElement,dropzone:e.dropTarget,relatedTarget:n.target,draggable:n.interactable,timeStamp:n.timeStamp,type:"dragenter"},n.dragEnter=e.dropElement,n.dropzone=e.dropTarget)),"dragend"===n.type&&e.dropTarget&&(i.drop=r.extend({type:"drop"},o),n.dropzone=e.dropTarget,n.relatedTarget=e.dropElement),"dragstart"===n.type&&(i.activate=r.extend({type:"dropactivate"},o),i.activate.target=null,i.activate.dropzone=null),"dragend"===n.type&&(i.deactivate=r.extend({type:"dropdeactivate"},o),i.deactivate.target=null,i.deactivate.dropzone=null),"dragmove"===n.type&&e.dropTarget&&(i.move=r.extend({dragmove:n,type:"dropmove"},o),n.dropzone=e.dropTarget),i}function m(e,t){var n=e.activeDrops,i=e.prevDropTarget,r=e.dropTarget,o=e.dropElement;t.leave&&i.fire(t.leave),t.move&&r.fire(t.move),t.enter&&r.fire(t.enter),t.drop&&r.fire(t.drop),t.deactivate&&d(n,t.deactivate),e.prevDropTarget=r,e.prevDropElement=o}c.signals.on("action-start",function(e){var t=e.interaction;e.event;if("drag"===t.prepared.name){t.activeDrops.dropzones=[],t.activeDrops.elements=[],t.activeDrops.rects=[],t.dropEvents=null,t.dynamicDrop||h(t.activeDrops,t.element);var n=t.prevEvent,i=g(t,0,n);i.activate&&d(t.activeDrops,i.activate)}}),a.signals.on("new",function(e){var t=e.interaction,n=e.iEvent,i=e.event;if("dragmove"===n.type||"dragend"===n.type){var o=t.element,s=n,a=function(e,t,n){var i=e.interaction,o=[];f&&h(i.activeDrops,n);for(var s=0;s<i.activeDrops.dropzones.length;s++){var a=i.activeDrops.dropzones[s],l=i.activeDrops.elements[s],c=i.activeDrops.rects[s];o.push(a.dropCheck(e,t,i.target,n,l,c)?l:null)}var u=r.indexOfDeepestElement(o);return{dropzone:i.activeDrops.dropzones[u]||null,element:i.activeDrops.elements[u]||null}}(s,i,o);t.dropTarget=a.dropzone,t.dropElement=a.element,t.dropEvents=g(t,0,s)}}),c.signals.on("action-move",function(e){var t=e.interaction;"drag"===t.prepared.name&&m(t,t.dropEvents)}),c.signals.on("action-end",function(e){var t=e.interaction;"drag"===t.prepared.name&&m(t,t.dropEvents)}),c.signals.on("stop-drag",function(e){var t=e.interaction;t.activeDrops={dropzones:null,elements:null,rects:null},t.dropEvents=null}),l.prototype.dropzone=function(e){return r.is.object(e)?(this.options.drop.enabled=!1!==e.enabled,r.is.function(e.ondrop)&&(this.events.ondrop=e.ondrop),r.is.function(e.ondropactivate)&&(this.events.ondropactivate=e.ondropactivate),r.is.function(e.ondropdeactivate)&&(this.events.ondropdeactivate=e.ondropdeactivate),r.is.function(e.ondragenter)&&(this.events.ondragenter=e.ondragenter),r.is.function(e.ondragleave)&&(this.events.ondragleave=e.ondragleave),r.is.function(e.ondropmove)&&(this.events.ondropmove=e.ondropmove),/^(pointer|center)$/.test(e.overlap)?this.options.drop.overlap=e.overlap:r.is.number(e.overlap)&&(this.options.drop.overlap=Math.max(Math.min(1,e.overlap),0)),"accept"in e&&(this.options.drop.accept=e.accept),"checker"in e&&(this.options.drop.checker=e.checker),this):r.is.bool(e)?(this.options.drop.enabled=e,e||(this.ondragenter=this.ondragleave=this.ondrop=this.ondropactivate=this.ondropdeactivate=null),this):this.options.drop},l.prototype.dropCheck=function(e,t,n,i,o,s){var a=!1;if(!(s=s||this.getRect(o)))return!!this.options.drop.checker&&this.options.drop.checker(e,t,a,this,o,n,i);var l=this.options.drop.overlap;if("pointer"===l){var c=r.getOriginXY(n,i,"drag"),u=r.getPageXY(e);u.x+=c.x,u.y+=c.y;var p=u.x>s.left&&u.x<s.right,f=u.y>s.top&&u.y<s.bottom;a=p&&f}var d=n.getRect(i);if(d&&"center"===l){var h=d.left+d.width/2,g=d.top+d.height/2;a=h>=s.left&&h<=s.right&&g>=s.top&&g<=s.bottom}if(d&&r.is.number(l)){var m=Math.max(0,Math.min(s.right,d.right)-Math.max(s.left,d.left))*Math.max(0,Math.min(s.bottom,d.bottom)-Math.max(s.top,d.top)),v=m/(d.width*d.height);a=v>=l}return this.options.drop.checker&&(a=this.options.drop.checker(e,t,a,this,o,n,i)),a},l.signals.on("unset",function(e){var t=e.interactable;t.dropzone(!1)}),l.settingsMethods.push("dropChecker"),c.signals.on("new",function(e){e.dropTarget=null,e.dropElement=null,e.prevDropTarget=null,e.prevDropElement=null,e.dropEvents=null,e.activeDrops={dropzones:[],elements:[],rects:[]}}),c.signals.on("stop",function(e){var t=e.interaction;t.dropTarget=t.dropElement=t.prevDropTarget=t.prevDropElement=null}),s.dynamicDrop=function(e){return r.is.bool(e)?(f=e,s):f},r.merge(l.eventTypes,["dragenter","dragleave","dropactivate","dropdeactivate","dropmove","drop"]),i.methodDict.drop="dropzone",u.drop=p.defaults,t.exports=p},{"../InteractEvent":3,"../Interactable":4,"../Interaction":5,"../defaultOptions":18,"../interact":21,"../scope":33,"../utils":44,"./base":6}],9:[function(e,t,n){"use strict";var i=e("./base"),r=e("../utils"),o=e("../InteractEvent"),s=e("../Interactable"),a=e("../Interaction"),l=e("../defaultOptions"),c={defaults:{enabled:!1,origin:null,restrict:null},checker:function(e,t,n,i,r){return r.pointerIds.length>=2?{name:"gesture"}:null},getCursor:function(){return""}};o.signals.on("new",function(e){var t=e.iEvent,n=e.interaction;"gesturestart"===t.type&&(t.ds=0,n.gesture.startDistance=n.gesture.prevDistance=t.distance,n.gesture.startAngle=n.gesture.prevAngle=t.angle,n.gesture.scale=1)}),o.signals.on("new",function(e){var t=e.iEvent,n=e.interaction;"gesturemove"===t.type&&(t.ds=t.scale-n.gesture.scale,n.target.fire(t),n.gesture.prevAngle=t.angle,n.gesture.prevDistance=t.distance,t.scale===1/0||null===t.scale||void 0===t.scale||isNaN(t.scale)||(n.gesture.scale=t.scale))}),s.prototype.gesturable=function(e){return r.is.object(e)?(this.options.gesture.enabled=!1!==e.enabled,this.setPerAction("gesture",e),this.setOnEvents("gesture",e),this):r.is.bool(e)?(this.options.gesture.enabled=e,e||(this.ongesturestart=this.ongesturestart=this.ongestureend=null),this):this.options.gesture},o.signals.on("set-delta",function(e){var t=e.interaction,n=e.iEvent,i=e.action,s=e.event,a=e.starting,l=e.ending,c=e.deltaSource;if("gesture"===i){var u=t.pointers;n.touches=[u[0],u[1]],a?(n.distance=r.touchDistance(u,c),n.box=r.touchBBox(u),n.scale=1,n.ds=0,n.angle=r.touchAngle(u,void 0,c),n.da=0):l||s instanceof o?(n.distance=t.prevEvent.distance,n.box=t.prevEvent.box,n.scale=t.prevEvent.scale,n.ds=n.scale-1,n.angle=t.prevEvent.angle,n.da=n.angle-t.gesture.startAngle):(n.distance=r.touchDistance(u,c),n.box=r.touchBBox(u),n.scale=n.distance/t.gesture.startDistance,n.angle=r.touchAngle(u,t.gesture.prevAngle,c),n.ds=n.scale-t.gesture.prevScale,n.da=n.angle-t.gesture.prevAngle)}}),a.signals.on("new",function(e){e.gesture={start:{x:0,y:0},startDistance:0,prevDistance:0,distance:0,scale:1,startAngle:0,prevAngle:0}}),i.gesture=c,i.names.push("gesture"),r.merge(s.eventTypes,["gesturestart","gesturemove","gestureend"]),i.methodDict.gesture="gesturable",l.gesture=c.defaults,t.exports=c},{"../InteractEvent":3,"../Interactable":4,"../Interaction":5,"../defaultOptions":18,"../utils":44,"./base":6}],10:[function(e,t,n){"use strict";var i=e("./base"),r=e("../utils"),o=e("../utils/browser"),s=e("../InteractEvent"),a=e("../Interactable"),l=e("../Interaction"),c=e("../defaultOptions"),u=o.supportsTouch||o.supportsPointerEvent?20:10,p={defaults:{enabled:!1,mouseButtons:null,origin:null,snap:null,restrict:null,inertia:null,autoScroll:null,square:!1,preserveAspectRatio:!1,axis:"xy",margin:NaN,edges:null,invert:"none"},checker:function(e,t,n,i,o,s){if(!s)return null;var a=r.extend({},o.curCoords.page),l=n.options;if(l.resize.enabled){var c=l.resize,p={left:!1,right:!1,top:!1,bottom:!1};if(r.is.object(c.edges)){for(var d in p)p[d]=f(d,c.edges[d],a,o._eventTarget,i,s,c.margin||u);if(p.left=p.left&&!p.right,p.top=p.top&&!p.bottom,p.left||p.right||p.top||p.bottom)return{name:"resize",edges:p}}else{var h="y"!==l.resize.axis&&a.x>s.right-u,g="x"!==l.resize.axis&&a.y>s.bottom-u;if(h||g)return{name:"resize",axes:(h?"x":"")+(g?"y":"")}}}return null},cursors:o.isIe9?{x:"e-resize",y:"s-resize",xy:"se-resize",top:"n-resize",left:"w-resize",bottom:"s-resize",right:"e-resize",topleft:"se-resize",bottomright:"se-resize",topright:"ne-resize",bottomleft:"ne-resize"}:{x:"ew-resize",y:"ns-resize",xy:"nwse-resize",top:"ns-resize",left:"ew-resize",bottom:"ns-resize",right:"ew-resize",topleft:"nwse-resize",bottomright:"nwse-resize",topright:"nesw-resize",bottomleft:"nesw-resize"},getCursor:function(e){if(e.axis)return p.cursors[e.name+e.axis];if(e.edges){for(var t="",n=["top","bottom","left","right"],i=0;i<4;i++)e.edges[n[i]]&&(t+=n[i]);return p.cursors[t]}}};function f(e,t,n,i,o,s,a){if(!t)return!1;if(!0===t){var l=r.is.number(s.width)?s.width:s.right-s.left,c=r.is.number(s.height)?s.height:s.bottom-s.top;if(l<0&&("left"===e?e="right":"right"===e&&(e="left")),c<0&&("top"===e?e="bottom":"bottom"===e&&(e="top")),"left"===e)return n.x<(l>=0?s.left:s.right)+a;if("top"===e)return n.y<(c>=0?s.top:s.bottom)+a;if("right"===e)return n.x>(l>=0?s.right:s.left)-a;if("bottom"===e)return n.y>(c>=0?s.bottom:s.top)-a}return!!r.is.element(i)&&(r.is.element(t)?t===i:r.matchesUpTo(i,t,o))}s.signals.on("new",function(e){var t=e.iEvent,n=e.interaction;if("resizestart"===t.type&&n.prepared.edges){var i=n.target.getRect(n.element),o=n.target.options.resize;if(o.square||o.preserveAspectRatio){var s=r.extend({},n.prepared.edges);s.top=s.top||s.left&&!s.bottom,s.left=s.left||s.top&&!s.right,s.bottom=s.bottom||s.right&&!s.top,s.right=s.right||s.bottom&&!s.left,n.prepared._linkedEdges=s}else n.prepared._linkedEdges=null;o.preserveAspectRatio&&(n.resizeStartAspectRatio=i.width/i.height),n.resizeRects={start:i,current:r.extend({},i),inverted:r.extend({},i),previous:r.extend({},i),delta:{left:0,right:0,width:0,top:0,bottom:0,height:0}},t.rect=n.resizeRects.inverted,t.deltaRect=n.resizeRects.delta}}),s.signals.on("new",function(e){var t=e.iEvent,n=e.phase,i=e.interaction;if("move"===n&&i.prepared.edges){var o=i.target.options.resize,s=o.invert,a="reposition"===s||"negate"===s,l=i.prepared.edges,c=i.resizeRects.start,u=i.resizeRects.current,p=i.resizeRects.inverted,f=i.resizeRects.delta,d=r.extend(i.resizeRects.previous,p),h=l,g=t.dx,m=t.dy;if(o.preserveAspectRatio||o.square){var v=o.preserveAspectRatio?i.resizeStartAspectRatio:1;l=i.prepared._linkedEdges,h.left&&h.bottom||h.right&&h.top?m=-g/v:h.left||h.right?m=g/v:(h.top||h.bottom)&&(g=m*v)}if(l.top&&(u.top+=m),l.bottom&&(u.bottom+=m),l.left&&(u.left+=g),l.right&&(u.right+=g),a){if(r.extend(p,u),"reposition"===s){var y=void 0;p.top>p.bottom&&(y=p.top,p.top=p.bottom,p.bottom=y),p.left>p.right&&(y=p.left,p.left=p.right,p.right=y)}}else p.top=Math.min(u.top,c.bottom),p.bottom=Math.max(u.bottom,c.top),p.left=Math.min(u.left,c.right),p.right=Math.max(u.right,c.left);for(var b in p.width=p.right-p.left,p.height=p.bottom-p.top,p)f[b]=p[b]-d[b];t.edges=i.prepared.edges,t.rect=p,t.deltaRect=f}}),a.prototype.resizable=function(e){return r.is.object(e)?(this.options.resize.enabled=!1!==e.enabled,this.setPerAction("resize",e),this.setOnEvents("resize",e),/^x$|^y$|^xy$/.test(e.axis)?this.options.resize.axis=e.axis:null===e.axis&&(this.options.resize.axis=c.resize.axis),r.is.bool(e.preserveAspectRatio)?this.options.resize.preserveAspectRatio=e.preserveAspectRatio:r.is.bool(e.square)&&(this.options.resize.square=e.square),this):r.is.bool(e)?(this.options.resize.enabled=e,e||(this.onresizestart=this.onresizestart=this.onresizeend=null),this):this.options.resize},l.signals.on("new",function(e){e.resizeAxes="xy"}),s.signals.on("set-delta",function(e){var t=e.interaction,n=e.iEvent,i=e.action;if("resize"===i&&t.resizeAxes){var r=t.target.options;r.resize.square?("y"===t.resizeAxes?n.dx=n.dy:n.dy=n.dx,n.axes="xy"):(n.axes=t.resizeAxes,"x"===t.resizeAxes?n.dy=0:"y"===t.resizeAxes&&(n.dx=0))}}),i.resize=p,i.names.push("resize"),r.merge(a.eventTypes,["resizestart","resizemove","resizeinertiastart","resizeinertiaresume","resizeend"]),i.methodDict.resize="resizable",c.resize=p.defaults,t.exports=p},{"../InteractEvent":3,"../Interactable":4,"../Interaction":5,"../defaultOptions":18,"../utils":44,"../utils/browser":36,"./base":6}],11:[function(e,t,n){"use strict";var i=e("./utils/raf"),r=e("./utils/window").getWindow,o=e("./utils/is"),s=e("./utils/domUtils"),a=e("./Interaction"),l=e("./defaultOptions"),c={defaults:{enabled:!1,container:null,margin:60,speed:300},interaction:null,i:null,x:0,y:0,isScrolling:!1,prevTime:0,start:function(e){c.isScrolling=!0,i.cancel(c.i),c.interaction=e,c.prevTime=(new Date).getTime(),c.i=i.request(c.scroll)},stop:function(){c.isScrolling=!1,i.cancel(c.i)},scroll:function(){var e=c.interaction.target.options[c.interaction.prepared.name].autoScroll,t=e.container||r(c.interaction.element),n=(new Date).getTime(),s=(n-c.prevTime)/1e3,a=e.speed*s;a>=1&&(o.window(t)?t.scrollBy(c.x*a,c.y*a):t&&(t.scrollLeft+=c.x*a,t.scrollTop+=c.y*a),c.prevTime=n),c.isScrolling&&(i.cancel(c.i),c.i=i.request(c.scroll))},check:function(e,t){var n=e.options;return n[t].autoScroll&&n[t].autoScroll.enabled},onInteractionMove:function(e){var t=e.interaction,n=e.pointer;if(t.interacting()&&c.check(t.target,t.prepared.name))if(t.simulation)c.x=c.y=0;else{var i=void 0,a=void 0,l=void 0,u=void 0,p=t.target.options[t.prepared.name].autoScroll,f=p.container||r(t.element);if(o.window(f))u=n.clientX<c.margin,i=n.clientY<c.margin,a=n.clientX>f.innerWidth-c.margin,l=n.clientY>f.innerHeight-c.margin;else{var d=s.getElementClientRect(f);u=n.clientX<d.left+c.margin,i=n.clientY<d.top+c.margin,a=n.clientX>d.right-c.margin,l=n.clientY>d.bottom-c.margin}c.x=a?1:u?-1:0,c.y=l?1:i?-1:0,c.isScrolling||(c.margin=p.margin,c.speed=p.speed,c.start(t))}}};a.signals.on("stop-active",function(){c.stop()}),a.signals.on("action-move",c.onInteractionMove),l.perAction.autoScroll=c.defaults,t.exports=c},{"./Interaction":5,"./defaultOptions":18,"./utils/domUtils":39,"./utils/is":46,"./utils/raf":50,"./utils/window":52}],12:[function(e,t,n){"use strict";var i=e("../Interactable"),r=e("../actions/base"),o=e("../utils/is"),s=e("../utils/domUtils"),a=e("../utils"),l=a.warnOnce;i.prototype.getAction=function(e,t,n,i){var r=this.defaultActionChecker(e,t,n,i);return this.options.actionChecker?this.options.actionChecker(e,t,r,this,i,n):r},i.prototype.ignoreFrom=l(function(e){return this._backCompatOption("ignoreFrom",e)},"Interactable.ignoreForm() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue})."),i.prototype.allowFrom=l(function(e){return this._backCompatOption("allowFrom",e)},"Interactable.allowForm() has been deprecated. Use Interactble.draggable({allowFrom: newValue})."),i.prototype.testIgnore=function(e,t,n){return!(!e||!o.element(n))&&(o.string(e)?s.matchesUpTo(n,e,t):!!o.element(e)&&s.nodeContains(e,n))},i.prototype.testAllow=function(e,t,n){return!e||!!o.element(n)&&(o.string(e)?s.matchesUpTo(n,e,t):!!o.element(e)&&s.nodeContains(e,n))},i.prototype.testIgnoreAllow=function(e,t,n){return!this.testIgnore(e.ignoreFrom,t,n)&&this.testAllow(e.allowFrom,t,n)},i.prototype.actionChecker=function(e){return o.function(e)?(this.options.actionChecker=e,this):null===e?(delete this.options.actionChecker,this):this.options.actionChecker},i.prototype.styleCursor=function(e){return o.bool(e)?(this.options.styleCursor=e,this):null===e?(delete this.options.styleCursor,this):this.options.styleCursor},i.prototype.defaultActionChecker=function(e,t,n,i){for(var o=this.getRect(i),s=t.buttons||{0:1,1:4,3:8,4:16}[t.button],a=null,l=0;l<r.names.length;l++){var c=r.names[l];if((!n.pointerIsDown||!/mouse|pointer/.test(n.pointerType)||0!=(s&this.options[c].mouseButtons))&&(a=r[c].checker(e,t,this,i,n,o)))return a}}},{"../Interactable":4,"../actions/base":6,"../utils":44,"../utils/domUtils":39,"../utils/is":46}],13:[function(e,t,n){"use strict";var i=e("../interact"),r=e("../Interactable"),o=e("../Interaction"),s=e("../actions/base"),a=e("../defaultOptions"),l=e("../scope"),c=e("../utils"),u=e("../utils/Signals").new();e("./InteractableMethods");var p={signals:u,withinInteractionLimit:m,maxInteractions:1/0,defaults:{perAction:{manualStart:!1,max:1/0,maxPerElement:1,allowFrom:null,ignoreFrom:null,mouseButtons:1}},setActionDefaults:function(e){c.extend(e.defaults,p.defaults.perAction)},validateAction:f};function f(e,t,n,i){return c.is.object(e)&&t.testIgnoreAllow(t.options[e.name],n,i)&&t.options[e.name].enabled&&m(t,n,e)?e:null}function d(e,t,n,i,r,o){for(var s=0,a=i.length;s<a;s++){var l=i[s],c=r[s],u=f(l.getAction(t,n,e,c),l,c,o);if(u)return{action:u,target:l,element:c}}return{}}function h(e,t,n,i){var r=[],o=[],s=i;function a(e){r.push(e),o.push(s)}for(;c.is.element(s);){r=[],o=[],l.interactables.forEachMatch(s,a);var u=d(e,t,n,r,o,i);if(u.action&&!u.target.options[u.action.name].manualStart)return u;s=c.parentNode(s)}return{}}function g(e,t){var n=t.action,i=t.target,r=t.element;if(n=n||{},e.target&&e.target.options.styleCursor&&(e.target._doc.documentElement.style.cursor=""),e.target=i,e.element=r,c.copyAction(e.prepared,n),i&&i.options.styleCursor){var o=n?s[n.name].getCursor(n):"";e.target._doc.documentElement.style.cursor=o}u.fire("prepared",{interaction:e})}function m(e,t,n){var i=e.options,r=i[n.name].max,o=i[n.name].maxPerElement,s=0,a=0,c=0;if(r&&o&&p.maxInteractions){for(var u=0;u<l.interactions.length;u++){var f=l.interactions[u],d=f.prepared.name;if(f.interacting()){if(++s>=p.maxInteractions)return!1;if(f.target===e){if((a+=d===n.name|0)>=r)return!1;if(f.element===t&&(c++,d!==n.name||c>=o))return!1}}}return p.maxInteractions>0}}o.signals.on("down",function(e){var t=e.interaction,n=e.pointer,i=e.event,r=e.eventTarget;if(!t.interacting()){var o=h(t,n,i,r);g(t,o)}}),o.signals.on("move",function(e){var t=e.interaction,n=e.pointer,i=e.event,r=e.eventTarget;if("mouse"===t.pointerType&&!t.pointerIsDown&&!t.interacting()){var o=h(t,n,i,r);g(t,o)}}),o.signals.on("move",function(e){var t=e.interaction,n=e.event;if(t.pointerIsDown&&!t.interacting()&&t.pointerWasMoved&&t.prepared.name){u.fire("before-start",e);var i=t.target;t.prepared.name&&i&&(i.options[t.prepared.name].manualStart||!m(i,t.element,t.prepared)?t.stop(n):t.start(t.prepared,i,t.element))}}),o.signals.on("stop",function(e){var t=e.interaction,n=t.target;n&&n.options.styleCursor&&(n._doc.documentElement.style.cursor="")}),i.maxInteractions=function(e){return c.is.number(e)?(p.maxInteractions=e,i):p.maxInteractions},r.settingsMethods.push("styleCursor"),r.settingsMethods.push("actionChecker"),r.settingsMethods.push("ignoreFrom"),r.settingsMethods.push("allowFrom"),a.base.actionChecker=null,a.base.styleCursor=!0,c.extend(a.perAction,p.defaults.perAction),t.exports=p},{"../Interactable":4,"../Interaction":5,"../actions/base":6,"../defaultOptions":18,"../interact":21,"../scope":33,"../utils":44,"../utils/Signals":34,"./InteractableMethods":12}],14:[function(e,t,n){"use strict";var i=e("./base"),r=e("../scope"),o=e("../utils/is"),s=e("../utils/domUtils"),a=s.parentNode;i.setActionDefaults(e("../actions/drag")),i.signals.on("before-start",function(e){var t=e.interaction,n=e.eventTarget,s=e.dx,l=e.dy;if("drag"===t.prepared.name){var c=Math.abs(s),u=Math.abs(l),p=t.target.options.drag,f=p.startAxis,d=c>u?"x":c<u?"y":"xy";if(t.prepared.axis="start"===p.lockAxis?d[0]:p.lockAxis,"xy"!==d&&"xy"!==f&&f!==d){t.prepared.name=null;for(var h=n,g=function(e){if(e!==t.target){var r=t.target.options.drag;if(!r.manualStart&&e.testIgnoreAllow(r,h,n)){var o=e.getAction(t.downPointer,t.downEvent,t,h);if(o&&"drag"===o.name&&function(e,t){if(!t)return!1;var n=t.options.drag.startAxis;return"xy"===e||"xy"===n||n===e}(d,e)&&i.validateAction(o,e,h,n))return e}}};o.element(h);){var m=r.interactables.forEachMatch(h,g);if(m){t.prepared.name="drag",t.target=m,t.element=h;break}h=a(h)}}}})},{"../actions/drag":7,"../scope":33,"../utils/domUtils":39,"../utils/is":46,"./base":13}],15:[function(e,t,n){"use strict";e("./base").setActionDefaults(e("../actions/gesture"))},{"../actions/gesture":9,"./base":13}],16:[function(e,t,n){"use strict";var i=e("./base"),r=e("../Interaction");function o(e){var t=e.prepared&&e.prepared.name;if(!t)return null;var n=e.target.options;return n[t].hold||n[t].delay}i.defaults.perAction.hold=0,i.defaults.perAction.delay=0,r.signals.on("new",function(e){e.autoStartHoldTimer=null}),i.signals.on("prepared",function(e){var t=e.interaction,n=o(t);n>0&&(t.autoStartHoldTimer=setTimeout(function(){t.start(t.prepared,t.target,t.element)},n))}),r.signals.on("move",function(e){var t=e.interaction,n=e.duplicate;t.pointerWasMoved&&!n&&clearTimeout(t.autoStartHoldTimer)}),i.signals.on("before-start",function(e){var t=e.interaction,n=o(t);n>0&&(t.prepared.name=null)}),t.exports={getHoldDuration:o}},{"../Interaction":5,"./base":13}],17:[function(e,t,n){"use strict";e("./base").setActionDefaults(e("../actions/resize"))},{"../actions/resize":10,"./base":13}],18:[function(e,t,n){"use strict";t.exports={base:{accept:null,preventDefault:"auto",deltaSource:"page"},perAction:{origin:{x:0,y:0},inertia:{enabled:!1,resistance:10,minSpeed:100,endSpeed:10,allowResume:!0,smoothEndDuration:300}}}},{}],19:[function(e,t,n){"use strict";e("./inertia"),e("./modifiers/snap"),e("./modifiers/restrict"),e("./pointerEvents/base"),e("./pointerEvents/holdRepeat"),e("./pointerEvents/interactableTargets"),e("./autoStart/hold"),e("./actions/gesture"),e("./actions/resize"),e("./actions/drag"),e("./actions/drop"),e("./modifiers/snapSize"),e("./modifiers/restrictEdges"),e("./modifiers/restrictSize"),e("./autoStart/gesture"),e("./autoStart/resize"),e("./autoStart/drag"),e("./interactablePreventDefault.js"),e("./autoScroll"),t.exports=e("./interact")},{"./actions/drag":7,"./actions/drop":8,"./actions/gesture":9,"./actions/resize":10,"./autoScroll":11,"./autoStart/drag":14,"./autoStart/gesture":15,"./autoStart/hold":16,"./autoStart/resize":17,"./inertia":20,"./interact":21,"./interactablePreventDefault.js":22,"./modifiers/restrict":24,"./modifiers/restrictEdges":25,"./modifiers/restrictSize":26,"./modifiers/snap":27,"./modifiers/snapSize":28,"./pointerEvents/base":30,"./pointerEvents/holdRepeat":31,"./pointerEvents/interactableTargets":32}],20:[function(e,t,n){"use strict";var i=e("./InteractEvent"),r=e("./Interaction"),o=e("./modifiers/base"),s=e("./utils"),a=e("./utils/raf");function l(e){var t=e.inertiaStatus;if(t.active){var n=t.upCoords.page,i=t.upCoords.client;s.setCoords(e.curCoords,[{pageX:n.x+t.sx,pageY:n.y+t.sy,clientX:i.x+t.sx,clientY:i.y+t.sy}])}}r.signals.on("new",function(e){e.inertiaStatus={active:!1,smoothEnd:!1,allowResume:!1,startEvent:null,upCoords:{},xe:0,ye:0,sx:0,sy:0,t0:0,vx0:0,vys:0,duration:0,lambda_v0:0,one_ve_v0:0,i:null},e.boundInertiaFrame=function(){return function(){l(this),s.setCoordDeltas(this.pointerDelta,this.prevCoords,this.curCoords);var e=this.inertiaStatus,t=this.target.options[this.prepared.name].inertia.resistance,n=(new Date).getTime()/1e3-e.t0;if(n<e.te){var i=1-(Math.exp(-t*n)-e.lambda_v0)/e.one_ve_v0;if(e.modifiedXe===e.xe&&e.modifiedYe===e.ye)e.sx=e.xe*i,e.sy=e.ye*i;else{var r=s.getQuadraticCurvePoint(0,0,e.xe,e.ye,e.modifiedXe,e.modifiedYe,i);e.sx=r.x,e.sy=r.y}this.doMove(),e.i=a.request(this.boundInertiaFrame)}else e.sx=e.modifiedXe,e.sy=e.modifiedYe,this.doMove(),this.end(e.startEvent),e.active=!1,this.simulation=null;s.copyCoords(this.prevCoords,this.curCoords)}.apply(e)},e.boundSmoothEndFrame=function(){return function(){l(this);var e=this.inertiaStatus,t=(new Date).getTime()-e.t0,n=this.target.options[this.prepared.name].inertia.smoothEndDuration;t<n?(e.sx=s.easeOutQuad(t,0,e.xe,n),e.sy=s.easeOutQuad(t,0,e.ye,n),this.pointerMove(e.startEvent,e.startEvent),e.i=a.request(this.boundSmoothEndFrame)):(e.sx=e.xe,e.sy=e.ye,this.pointerMove(e.startEvent,e.startEvent),this.end(e.startEvent),e.smoothEnd=e.active=!1,this.simulation=null)}.apply(e)}}),r.signals.on("down",function(e){var t=e.interaction,n=e.event,l=e.pointer,c=e.eventTarget,u=t.inertiaStatus;if(u.active)for(var p=c;s.is.element(p);){if(p===t.element){a.cancel(u.i),u.active=!1,t.simulation=null,t.updatePointer(l),s.setCoords(t.curCoords,t.pointers);var f={interaction:t};r.signals.fire("before-action-move",f),r.signals.fire("action-resume",f);var d=new i(t,n,t.prepared.name,"inertiaresume",t.element);t.target.fire(d),t.prevEvent=d,o.resetStatuses(t.modifierStatuses),s.copyCoords(t.prevCoords,t.curCoords);break}p=s.parentNode(p)}}),r.signals.on("up",function(e){var t=e.interaction,n=e.event,r=t.inertiaStatus;if(t.interacting()&&!r.active){var l=t.target,c=l&&l.options,u=c&&t.prepared.name&&c[t.prepared.name].inertia,p=(new Date).getTime(),f={},d=s.extend({},t.curCoords.page),h=t.pointerDelta.client.speed,g=!1,m=void 0,v=u&&u.enabled&&"gesture"!==t.prepared.name&&n!==r.startEvent,y=v&&p-t.curCoords.timeStamp<50&&h>u.minSpeed&&h>u.endSpeed,b={interaction:t,pageCoords:d,statuses:f,preEnd:!0,requireEndOnly:!0};v&&!y&&(o.resetStatuses(f),(m=o.setAll(b)).shouldMove&&m.locked&&(g=!0)),(y||g)&&(s.copyCoords(r.upCoords,t.curCoords),t.pointers[0]=r.startEvent=new i(t,n,t.prepared.name,"inertiastart",t.element),r.t0=p,r.active=!0,r.allowResume=u.allowResume,t.simulation=r,l.fire(r.startEvent),y?(r.vx0=t.pointerDelta.client.vx,r.vy0=t.pointerDelta.client.vy,r.v0=h,function(e,t){var n=e.target.options[e.prepared.name].inertia,i=n.resistance,r=-Math.log(n.endSpeed/t.v0)/i;t.x0=e.prevEvent.pageX,t.y0=e.prevEvent.pageY,t.t0=t.startEvent.timeStamp/1e3,t.sx=t.sy=0,t.modifiedXe=t.xe=(t.vx0-r)/i,t.modifiedYe=t.ye=(t.vy0-r)/i,t.te=r,t.lambda_v0=i/t.v0,t.one_ve_v0=1-n.endSpeed/t.v0}(t,r),s.extend(d,t.curCoords.page),d.x+=r.xe,d.y+=r.ye,o.resetStatuses(f),m=o.setAll(b),r.modifiedXe+=m.dx,r.modifiedYe+=m.dy,r.i=a.request(t.boundInertiaFrame)):(r.smoothEnd=!0,r.xe=m.dx,r.ye=m.dy,r.sx=r.sy=0,r.i=a.request(t.boundSmoothEndFrame)))}}),r.signals.on("stop-active",function(e){var t=e.interaction,n=t.inertiaStatus;n.active&&(a.cancel(n.i),n.active=!1,t.simulation=null)})},{"./InteractEvent":3,"./Interaction":5,"./modifiers/base":23,"./utils":44,"./utils/raf":50}],21:[function(e,t,n){"use strict";var i=e("./utils/browser"),r=e("./utils/events"),o=e("./utils"),s=e("./scope"),a=e("./Interactable"),l=e("./Interaction"),c={};function u(e,t){var n=s.interactables.get(e,t);return n||((n=new a(e,t)).events.global=c),n}u.isSet=function(e,t){return-1!==s.interactables.indexOfElement(e,t&&t.context)},u.on=function(e,t,n){if(o.is.string(e)&&-1!==e.search(" ")&&(e=e.trim().split(/ +/)),o.is.array(e)){for(var i=0;i<e.length;i++){var l=e[i];u.on(l,t,n)}return u}if(o.is.object(e)){for(var p in e)u.on(p,e[p],t);return u}return o.contains(a.eventTypes,e)?c[e]?c[e].push(t):c[e]=[t]:r.add(s.document,e,t,{options:n}),u},u.off=function(e,t,n){if(o.is.string(e)&&-1!==e.search(" ")&&(e=e.trim().split(/ +/)),o.is.array(e)){for(var i=0;i<e.length;i++){var l=e[i];u.off(l,t,n)}return u}if(o.is.object(e)){for(var p in e)u.off(p,e[p],t);return u}if(o.contains(a.eventTypes,e)){var f=void 0;e in c&&-1!==(f=c[e].indexOf(t))&&c[e].splice(f,1)}else r.remove(s.document,e,t,n);return u},u.debug=function(){return s},u.getPointerAverage=o.pointerAverage,u.getTouchBBox=o.touchBBox,u.getTouchDistance=o.touchDistance,u.getTouchAngle=o.touchAngle,u.getElementRect=o.getElementRect,u.getElementClientRect=o.getElementClientRect,u.matchesSelector=o.matchesSelector,u.closest=o.closest,u.supportsTouch=function(){return i.supportsTouch},u.supportsPointerEvent=function(){return i.supportsPointerEvent},u.stop=function(e){for(var t=s.interactions.length-1;t>=0;t--)s.interactions[t].stop(e);return u},u.pointerMoveTolerance=function(e){return o.is.number(e)?(l.pointerMoveTolerance=e,u):l.pointerMoveTolerance},u.addDocument=s.addDocument,u.removeDocument=s.removeDocument,s.interact=u,t.exports=u},{"./Interactable":4,"./Interaction":5,"./scope":33,"./utils":44,"./utils/browser":36,"./utils/events":40}],22:[function(e,t,n){"use strict";var i=e("./Interactable"),r=e("./Interaction"),o=e("./scope"),s=e("./utils/is"),a=e("./utils/events"),l=e("./utils/browser"),c=e("./utils/domUtils"),u=c.nodeContains,p=c.matchesSelector;function f(e){var t=e.interaction,n=e.event;t.target&&t.target.checkAndPreventDefault(n)}i.prototype.preventDefault=function(e){return/^(always|never|auto)$/.test(e)?(this.options.preventDefault=e,this):s.bool(e)?(this.options.preventDefault=e?"always":"never",this):this.options.preventDefault},i.prototype.checkAndPreventDefault=function(e){var t=this.options.preventDefault;"never"!==t&&("always"!==t&&(a.supportsPassive&&/^touch(start|move)$/.test(e.type)&&!l.isIOS||/^(mouse|pointer|touch)*(down|start)/i.test(e.type)||s.element(e.target)&&p(e.target,"input,select,textarea,[contenteditable=true],[contenteditable=true] *"))||e.preventDefault())};for(var d=["down","move","up","cancel"],h=0;h<d.length;h++){var g=d[h];r.signals.on(g,f)}r.docEvents.dragstart=function(e){for(var t=0;t<o.interactions.length;t++){var n=o.interactions[t];if(n.element&&(n.element===e.target||u(n.element,e.target)))return void n.target.checkAndPreventDefault(e)}}},{"./Interactable":4,"./Interaction":5,"./scope":33,"./utils/browser":36,"./utils/domUtils":39,"./utils/events":40,"./utils/is":46}],23:[function(e,t,n){"use strict";var i=e("../InteractEvent"),r=e("../Interaction"),o=e("../utils/extend"),s={names:[],setOffsets:function(e){var t=e.interaction,n=e.pageCoords,i=t.target,r=t.element,o=t.startOffset,a=i.getRect(r);a?(o.left=n.x-a.left,o.top=n.y-a.top,o.right=a.right-n.x,o.bottom=a.bottom-n.y,"width"in a||(a.width=a.right-a.left),"height"in a||(a.height=a.bottom-a.top)):o.left=o.top=o.right=o.bottom=0,e.rect=a,e.interactable=i,e.element=r;for(var l=0;l<s.names.length;l++){var c=s.names[l];e.options=i.options[t.prepared.name][c],e.options&&(t.modifierOffsets[c]=s[c].setOffset(e))}},setAll:function(e){var t=e.interaction,n=e.statuses,i=e.preEnd,r=e.requireEndOnly,l={dx:0,dy:0,changed:!1,locked:!1,shouldMove:!0};e.modifiedCoords=o({},e.pageCoords);for(var c=0;c<s.names.length;c++){var u=s.names[c],p=s[u],f=t.target.options[t.prepared.name][u];a(f,i,r)&&(e.status=e.status=n[u],e.options=f,e.offset=e.interaction.modifierOffsets[u],p.set(e),e.status.locked&&(e.modifiedCoords.x+=e.status.dx,e.modifiedCoords.y+=e.status.dy,l.dx+=e.status.dx,l.dy+=e.status.dy,l.locked=!0))}return l.shouldMove=!e.status||!l.locked||e.status.changed,l},resetStatuses:function(e){for(var t=0;t<s.names.length;t++){var n=s.names[t],i=e[n]||{};i.dx=i.dy=0,i.modifiedX=i.modifiedY=NaN,i.locked=!1,i.changed=!0,e[n]=i}return e},start:function(e,t){var n=e.interaction,i={interaction:n,pageCoords:("action-resume"===t?n.curCoords:n.startCoords).page,startOffset:n.startOffset,statuses:n.modifierStatuses,preEnd:!1,requireEndOnly:!1};s.setOffsets(i),s.resetStatuses(i.statuses),i.pageCoords=o({},n.startCoords.page),n.modifierResult=s.setAll(i)},beforeMove:function(e){var t=e.interaction,n=e.preEnd,i=e.interactingBeforeMove,r=s.setAll({interaction:t,preEnd:n,pageCoords:t.curCoords.page,statuses:t.modifierStatuses,requireEndOnly:!1});!r.shouldMove&&i&&(t._dontFireMove=!0),t.modifierResult=r},end:function(e){for(var t=e.interaction,n=e.event,i=0;i<s.names.length;i++){var r=s.names[i],o=t.target.options[t.prepared.name][r];if(a(o,!0,!0)){t.doMove({event:n,preEnd:!0});break}}},setXY:function(e){for(var t=e.iEvent,n=e.interaction,i=o({},e),r=0;r<s.names.length;r++){var a=s.names[r];if(i.options=n.target.options[n.prepared.name][a],i.options){var l=s[a];i.status=n.modifierStatuses[a],t[a]=l.modifyCoords(i)}}}};function a(e,t,n){return e&&e.enabled&&(t||!e.endOnly)&&(!n||e.endOnly)}r.signals.on("new",function(e){e.startOffset={left:0,right:0,top:0,bottom:0},e.modifierOffsets={},e.modifierStatuses=s.resetStatuses({}),e.modifierResult=null}),r.signals.on("action-start",s.start),r.signals.on("action-resume",s.start),r.signals.on("before-action-move",s.beforeMove),r.signals.on("action-end",s.end),i.signals.on("set-xy",s.setXY),t.exports=s},{"../InteractEvent":3,"../Interaction":5,"../utils/extend":41}],24:[function(e,t,n){"use strict";var i=e("./base"),r=e("../utils"),o=e("../defaultOptions"),s={defaults:{enabled:!1,endOnly:!1,restriction:null,elementRect:null},setOffset:function(e){var t=e.rect,n=e.startOffset,i=e.options,r=i&&i.elementRect,o={};return t&&r?(o.left=n.left-t.width*r.left,o.top=n.top-t.height*r.top,o.right=n.right-t.width*(1-r.right),o.bottom=n.bottom-t.height*(1-r.bottom)):o.left=o.top=o.right=o.bottom=0,o},set:function(e){var t=e.modifiedCoords,n=e.interaction,i=e.status,o=e.options;if(!o)return i;var s=i.useStatusXY?{x:i.x,y:i.y}:r.extend({},t),l=a(o.restriction,n,s);if(!l)return i;i.dx=0,i.dy=0,i.locked=!1;var c=l,u=s.x,p=s.y,f=n.modifierOffsets.restrict;"x"in l&&"y"in l?(u=Math.max(Math.min(c.x+c.width-f.right,s.x),c.x+f.left),p=Math.max(Math.min(c.y+c.height-f.bottom,s.y),c.y+f.top)):(u=Math.max(Math.min(c.right-f.right,s.x),c.left+f.left),p=Math.max(Math.min(c.bottom-f.bottom,s.y),c.top+f.top)),i.dx=u-s.x,i.dy=p-s.y,i.changed=i.modifiedX!==u||i.modifiedY!==p,i.locked=!(!i.dx&&!i.dy),i.modifiedX=u,i.modifiedY=p},modifyCoords:function(e){var t=e.page,n=e.client,i=e.status,r=e.phase,o=e.options,s=o&&o.elementRect;if(o&&o.enabled&&("start"!==r||!s||!i.locked)&&i.locked)return t.x+=i.dx,t.y+=i.dy,n.x+=i.dx,n.y+=i.dy,{dx:i.dx,dy:i.dy}},getRestrictionRect:a};function a(e,t,n){return r.is.function(e)?r.resolveRectLike(e,t.target,t.element,[n.x,n.y,t]):r.resolveRectLike(e,t.target,t.element)}i.restrict=s,i.names.push("restrict"),o.perAction.restrict=s.defaults,t.exports=s},{"../defaultOptions":18,"../utils":44,"./base":23}],25:[function(e,t,n){"use strict";var i=e("./base"),r=e("../utils"),o=e("../utils/rect"),s=e("../defaultOptions"),a=e("../actions/resize"),l=e("./restrict"),c=l.getRestrictionRect,u={top:1/0,left:1/0,bottom:-1/0,right:-1/0},p={top:-1/0,left:-1/0,bottom:1/0,right:1/0},f={defaults:{enabled:!1,endOnly:!1,min:null,max:null,offset:null},setOffset:function(e){var t=e.interaction,n=e.startOffset,i=e.options;if(!i)return r.extend({},n);var o=c(i.offset,t,t.startCoords.page);return o?{top:n.top+o.y,left:n.left+o.x,bottom:n.bottom+o.y,right:n.right+o.x}:n},set:function(e){var t=e.modifiedCoords,n=e.interaction,i=e.status,s=e.offset,a=e.options,l=n.prepared.linkedEdges||n.prepared.edges;if(n.interacting()&&l){var f=i.useStatusXY?{x:i.x,y:i.y}:r.extend({},t),d=o.xywhToTlbr(c(a.inner,n,f))||u,h=o.xywhToTlbr(c(a.outer,n,f))||p,g=f.x,m=f.y;i.dx=0,i.dy=0,i.locked=!1,l.top?m=Math.min(Math.max(h.top+s.top,f.y),d.top+s.top):l.bottom&&(m=Math.max(Math.min(h.bottom-s.bottom,f.y),d.bottom-s.bottom)),l.left?g=Math.min(Math.max(h.left+s.left,f.x),d.left+s.left):l.right&&(g=Math.max(Math.min(h.right-s.right,f.x),d.right-s.right)),i.dx=g-f.x,i.dy=m-f.y,i.changed=i.modifiedX!==g||i.modifiedY!==m,i.locked=!(!i.dx&&!i.dy),i.modifiedX=g,i.modifiedY=m}},modifyCoords:function(e){var t=e.page,n=e.client,i=e.status,r=e.phase,o=e.options;if(o&&o.enabled&&("start"!==r||!i.locked)&&i.locked)return t.x+=i.dx,t.y+=i.dy,n.x+=i.dx,n.y+=i.dy,{dx:i.dx,dy:i.dy}},noInner:u,noOuter:p,getRestrictionRect:c};i.restrictEdges=f,i.names.push("restrictEdges"),s.perAction.restrictEdges=f.defaults,a.defaults.restrictEdges=f.defaults,t.exports=f},{"../actions/resize":10,"../defaultOptions":18,"../utils":44,"../utils/rect":51,"./base":23,"./restrict":24}],26:[function(e,t,n){"use strict";var i=e("./base"),r=e("./restrictEdges"),o=e("../utils"),s=e("../utils/rect"),a=e("../defaultOptions"),l=e("../actions/resize"),c={width:-1/0,height:-1/0},u={width:1/0,height:1/0},p={defaults:{enabled:!1,endOnly:!1,min:null,max:null},setOffset:function(e){var t=e.interaction;return t.startOffset},set:function(e){var t=e.interaction,n=e.options,i=t.prepared.linkedEdges||t.prepared.edges;if(t.interacting()&&i){var a=s.xywhToTlbr(t.resizeRects.inverted),l=s.tlbrToXywh(r.getRestrictionRect(n.min,t))||c,p=s.tlbrToXywh(r.getRestrictionRect(n.max,t))||u;e.options={enabled:n.enabled,endOnly:n.endOnly,inner:o.extend({},r.noInner),outer:o.extend({},r.noOuter)},i.top?(e.options.inner.top=a.bottom-l.height,e.options.outer.top=a.bottom-p.height):i.bottom&&(e.options.inner.bottom=a.top+l.height,e.options.outer.bottom=a.top+p.height),i.left?(e.options.inner.left=a.right-l.width,e.options.outer.left=a.right-p.width):i.right&&(e.options.inner.right=a.left+l.width,e.options.outer.right=a.left+p.width),r.set(e)}},modifyCoords:r.modifyCoords};i.restrictSize=p,i.names.push("restrictSize"),a.perAction.restrictSize=p.defaults,l.defaults.restrictSize=p.defaults,t.exports=p},{"../actions/resize":10,"../defaultOptions":18,"../utils":44,"../utils/rect":51,"./base":23,"./restrictEdges":25}],27:[function(e,t,n){"use strict";var i=e("./base"),r=e("../interact"),o=e("../utils"),s=e("../defaultOptions"),a={defaults:{enabled:!1,endOnly:!1,range:1/0,targets:null,offsets:null,relativePoints:null},setOffset:function(e){var t=e.interaction,n=e.interactable,i=e.element,r=e.rect,s=e.startOffset,a=e.options,l=[],c=o.rectToXY(o.resolveRectLike(a.origin)),u=c||o.getOriginXY(n,i,t.prepared.name),p=void 0;if("startCoords"===(a=a||n.options[t.prepared.name].snap||{}).offset)p={x:t.startCoords.page.x-u.x,y:t.startCoords.page.y-u.y};else{var f=o.resolveRectLike(a.offset,n,i,[t]);p=o.rectToXY(f)||{x:0,y:0}}if(r&&a.relativePoints&&a.relativePoints.length)for(var d=0;d<a.relativePoints.length;d++){var h=a.relativePoints[d],g=h.x,m=h.y;l.push({x:s.left-r.width*g+p.x,y:s.top-r.height*m+p.y})}else l.push(p);return l},set:function(e){var t=e.interaction,n=e.modifiedCoords,i=e.status,r=e.options,s=e.offset,a=[],l=void 0,c=void 0,u=void 0;if(i.useStatusXY)c={x:i.x,y:i.y};else{var p=o.getOriginXY(t.target,t.element,t.prepared.name);(c=o.extend({},n)).x-=p.x,c.y-=p.y}i.realX=c.x,i.realY=c.y;for(var f=r.targets?r.targets.length:0,d=0;d<s.length;d++)for(var h=s[d],g=h.x,m=h.y,v=c.x-g,y=c.y-m,b=0;b<(r.targets||[]).length;b++){var x=(r.targets||[])[b];(l=o.is.function(x)?x(v,y,t):x)&&a.push({x:o.is.number(l.x)?l.x+g:v,y:o.is.number(l.y)?l.y+m:y,range:o.is.number(l.range)?l.range:r.range})}var _={target:null,inRange:!1,distance:0,range:0,dx:0,dy:0};for(u=0,f=a.length;u<f;u++){var w=(l=a[u]).range,E=l.x-c.x,T=l.y-c.y,C=o.hypot(E,T),S=C<=w;w===1/0&&_.inRange&&_.range!==1/0&&(S=!1),_.target&&!(S?_.inRange&&w!==1/0?C/w<_.distance/_.range:w===1/0&&_.range!==1/0||C<_.distance:!_.inRange&&C<_.distance)||(_.target=l,_.distance=C,_.range=w,_.inRange=S,_.dx=E,_.dy=T,i.range=w)}var A=void 0;_.target?(A=i.modifiedX!==_.target.x||i.modifiedY!==_.target.y,i.modifiedX=_.target.x,i.modifiedY=_.target.y):(A=!0,i.modifiedX=NaN,i.modifiedY=NaN),i.dx=_.dx,i.dy=_.dy,i.changed=A||_.inRange&&!i.locked,i.locked=_.inRange},modifyCoords:function(e){var t=e.page,n=e.client,i=e.status,r=e.phase,o=e.options,s=o&&o.relativePoints;if(o&&o.enabled&&("start"!==r||!s||!s.length))return i.locked&&(t.x+=i.dx,t.y+=i.dy,n.x+=i.dx,n.y+=i.dy),{range:i.range,locked:i.locked,x:i.modifiedX,y:i.modifiedY,realX:i.realX,realY:i.realY,dx:i.dx,dy:i.dy}}};r.createSnapGrid=function(e){return function(t,n){var i=e.limits||{left:-1/0,right:1/0,top:-1/0,bottom:1/0},r=0,s=0;o.is.object(e.offset)&&(r=e.offset.x,s=e.offset.y);var a=Math.round((t-r)/e.x),l=Math.round((n-s)/e.y),c=Math.max(i.left,Math.min(i.right,a*e.x+r)),u=Math.max(i.top,Math.min(i.bottom,l*e.y+s));return{x:c,y:u,range:e.range}}},i.snap=a,i.names.push("snap"),s.perAction.snap=a.defaults,t.exports=a},{"../defaultOptions":18,"../interact":21,"../utils":44,"./base":23}],28:[function(e,t,n){"use strict";var i=e("./base"),r=e("./snap"),o=e("../defaultOptions"),s=e("../actions/resize"),a=e("../utils/"),l={defaults:{enabled:!1,endOnly:!1,range:1/0,targets:null,offsets:null},setOffset:function(e){var t=e.interaction,n=e.options,i=t.prepared.edges;if(i){e.options={relativePoints:[{x:i.left?0:1,y:i.top?0:1}],origin:{x:0,y:0},offset:"self",range:n.range};var o=r.setOffset(e);return e.options=n,o}},set:function(e){var t=e.interaction,n=e.options,i=e.offset,o=e.modifiedCoords,s=a.extend({},o),l=s.x-i[0].x,c=s.y-i[0].y;e.options=a.extend({},n),e.options.targets=[];for(var u=0;u<(n.targets||[]).length;u++){var p=(n.targets||[])[u],f=void 0;(f=a.is.function(p)?p(l,c,t):p)&&("width"in f&&"height"in f&&(f.x=f.width,f.y=f.height),e.options.targets.push(f))}r.set(e)},modifyCoords:function(e){var t=e.options;e.options=a.extend({},t),e.options.enabled=t.enabled,e.options.relativePoints=[null],r.modifyCoords(e)}};i.snapSize=l,i.names.push("snapSize"),o.perAction.snapSize=l.defaults,s.defaults.snapSize=l.defaults,t.exports=l},{"../actions/resize":10,"../defaultOptions":18,"../utils/":44,"./base":23,"./snap":27}],29:[function(e,t,n){"use strict";var i=e("../utils/pointerUtils");t.exports=function(){function e(t,n,r,o,s){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i.pointerExtend(this,r),r!==n&&i.pointerExtend(this,n),this.interaction=s,this.timeStamp=(new Date).getTime(),this.originalEvent=r,this.type=t,this.pointerId=i.getPointerId(n),this.pointerType=i.getPointerType(n),this.target=o,this.currentTarget=null,"tap"===t){var a=s.getPointerIndex(n);this.dt=this.timeStamp-s.downTimes[a];var l=this.timeStamp-s.tapTime;this.double=!!(s.prevTap&&"doubletap"!==s.prevTap.type&&s.prevTap.target===this.target&&l<500)}else"doubletap"===t&&(this.dt=n.timeStamp-s.tapTime)}return e.prototype.subtractOrigin=function(e){var t=e.x,n=e.y;return this.pageX-=t,this.pageY-=n,this.clientX-=t,this.clientY-=n,this},e.prototype.addOrigin=function(e){var t=e.x,n=e.y;return this.pageX+=t,this.pageY+=n,this.clientX+=t,this.clientY+=n,this},e.prototype.preventDefault=function(){this.originalEvent.preventDefault()},e.prototype.stopPropagation=function(){this.propagationStopped=!0},e.prototype.stopImmediatePropagation=function(){this.immediatePropagationStopped=this.propagationStopped=!0},e}()},{"../utils/pointerUtils":49}],30:[function(e,t,n){"use strict";var i=e("./PointerEvent"),r=e("../Interaction"),o=e("../utils"),s=e("../defaultOptions"),a=e("../utils/Signals").new(),l=["down","up","cancel"],c=["down","up","cancel"],u={PointerEvent:i,fire:p,collectEventTargets:f,signals:a,defaults:{holdDuration:600,ignoreFrom:null,allowFrom:null,origin:{x:0,y:0}},types:["down","move","up","cancel","tap","doubletap","hold"]};function p(e){for(var t=e.interaction,n=e.pointer,r=e.event,s=e.eventTarget,l=e.type,c=void 0===l?e.pointerEvent.type:l,u=e.targets,d=void 0===u?f(e):u,h=e.pointerEvent,g=void 0===h?new i(c,n,r,s,t):h,m={interaction:t,pointer:n,event:r,eventTarget:s,targets:d,type:c,pointerEvent:g},v=0;v<d.length;v++){var y=d[v];for(var b in y.props||{})g[b]=y.props[b];var x=o.getOriginXY(y.eventable,y.element);if(g.subtractOrigin(x),g.eventable=y.eventable,g.currentTarget=y.element,y.eventable.fire(g),g.addOrigin(x),g.immediatePropagationStopped||g.propagationStopped&&v+1<d.length&&d[v+1].element!==g.currentTarget)break}if(a.fire("fired",m),"tap"===c){var _=g.double?p({interaction:t,pointer:n,event:r,eventTarget:s,type:"doubletap"}):g;t.prevTap=_,t.tapTime=_.timeStamp}return g}function f(e){var t=e.interaction,n=e.pointer,i=e.event,r=e.eventTarget,s=e.type,l=t.getPointerIndex(n);if("tap"===s&&(t.pointerWasMoved||!t.downTargets[l]||t.downTargets[l]!==r))return[];for(var c=o.getPath(r),u={interaction:t,pointer:n,event:i,eventTarget:r,type:s,path:c,targets:[],element:null},p=0;p<c.length;p++){var f=c[p];u.element=f,a.fire("collect-targets",u)}return"hold"===s&&(u.targets=u.targets.filter(function(e){return e.eventable.options.holdDuration===t.holdTimers[l].duration})),u.targets}r.signals.on("update-pointer-down",function(e){var t=e.interaction,n=e.pointerIndex;t.holdTimers[n]={duration:1/0,timeout:null}}),r.signals.on("remove-pointer",function(e){var t=e.interaction,n=e.pointerIndex;t.holdTimers.splice(n,1)}),r.signals.on("move",function(e){var t=e.interaction,n=e.pointer,i=e.event,r=e.eventTarget,o=e.duplicateMove,s=t.getPointerIndex(n);o||t.pointerIsDown&&!t.pointerWasMoved||(t.pointerIsDown&&clearTimeout(t.holdTimers[s].timeout),p({interaction:t,pointer:n,event:i,eventTarget:r,type:"move"}))}),r.signals.on("down",function(e){for(var t=e.interaction,n=e.pointer,i=e.event,r=e.eventTarget,s=e.pointerIndex,l=t.holdTimers[s],c=o.getPath(r),u={interaction:t,pointer:n,event:i,eventTarget:r,type:"hold",targets:[],path:c,element:null},f=0;f<c.length;f++){var d=c[f];u.element=d,a.fire("collect-targets",u)}if(u.targets.length){for(var h=1/0,g=0;g<u.targets.length;g++){var m=u.targets[g],v=m.eventable.options.holdDuration;v<h&&(h=v)}l.duration=h,l.timeout=setTimeout(function(){p({interaction:t,eventTarget:r,pointer:n,event:i,type:"hold"})},h)}}),r.signals.on("up",function(e){var t=e.interaction,n=e.pointer,i=e.event,r=e.eventTarget;t.pointerWasMoved||p({interaction:t,eventTarget:r,pointer:n,event:i,type:"tap"})});for(var d=["up","cancel"],h=0;h<d.length;h++){var g=d[h];r.signals.on(g,function(e){var t=e.interaction,n=e.pointerIndex;t.holdTimers[n]&&clearTimeout(t.holdTimers[n].timeout)})}function m(e){return function(t){var n=t.interaction,i=t.pointer,r=t.event,o=t.eventTarget;p({interaction:n,eventTarget:o,pointer:i,event:r,type:e})}}for(var v=0;v<l.length;v++)r.signals.on(l[v],m(c[v]));r.signals.on("new",function(e){e.prevTap=null,e.tapTime=0,e.holdTimers=[]}),s.pointerEvents=u.defaults,t.exports=u},{"../Interaction":5,"../defaultOptions":18,"../utils":44,"../utils/Signals":34,"./PointerEvent":29}],31:[function(e,t,n){"use strict";var i=e("./base"),r=e("../Interaction");i.signals.on("new",l),i.signals.on("fired",c);for(var o=["move","up","cancel","endall"],s=0;s<o.length;s++){var a=o[s];r.signals.on(a,u)}function l(e){var t=e.pointerEvent;"hold"===t.type&&(t.count=(t.count||0)+1)}function c(e){var t=e.interaction,n=e.pointerEvent,r=e.eventTarget,o=e.targets;if("hold"===n.type&&o.length){var s=o[0].eventable.options.holdRepeatInterval;s<=0||(t.holdIntervalHandle=setTimeout(function(){i.fire({interaction:t,eventTarget:r,type:"hold",pointer:n,event:n})},s))}}function u(e){var t=e.interaction;t.holdIntervalHandle&&(clearInterval(t.holdIntervalHandle),t.holdIntervalHandle=null)}i.defaults.holdRepeatInterval=0,i.types.push("holdrepeat"),t.exports={onNew:l,onFired:c,endHoldRepeat:u}},{"../Interaction":5,"./base":30}],32:[function(e,t,n){"use strict";var i=e("./base"),r=e("../Interactable"),o=e("../utils/is"),s=e("../scope"),a=e("../utils/extend"),l=e("../utils/arr"),c=l.merge;i.signals.on("collect-targets",function(e){var t=e.targets,n=e.element,i=e.type,r=e.eventTarget;s.interactables.forEachMatch(n,function(e){var s=e.events,a=s.options;s[i]&&o.element(n)&&e.testIgnoreAllow(a,n,r)&&t.push({element:n,eventable:s,props:{interactable:e}})})}),r.signals.on("new",function(e){var t=e.interactable;t.events.getRect=function(e){return t.getRect(e)}}),r.signals.on("set",function(e){var t=e.interactable,n=e.options;a(t.events.options,i.defaults),a(t.events.options,n)}),c(r.eventTypes,i.types),r.prototype.pointerEvents=function(e){return a(this.events.options,e),this};var u=r.prototype._backCompatOption;r.prototype._backCompatOption=function(e,t){var n=u.call(this,e,t);return n===this&&(this.events.options[e]=t),n},r.settingsMethods.push("pointerEvents")},{"../Interactable":4,"../scope":33,"../utils/arr":35,"../utils/extend":41,"../utils/is":46,"./base":30}],33:[function(e,t,n){"use strict";var i=e("./utils"),r=e("./utils/events"),o=e("./utils/Signals").new(),s=e("./utils/window"),a=s.getWindow,l={signals:o,events:r,utils:i,document:e("./utils/domObjects").document,documents:[],addDocument:function(e,t){if(i.contains(l.documents,e))return!1;t=t||a(e),l.documents.push(e),r.documents.push(e),e!==l.document&&r.add(t,"unload",l.onWindowUnload),o.fire("add-document",{doc:e,win:t})},removeDocument:function(e,t){var n=l.documents.indexOf(e);t=t||a(e),r.remove(t,"unload",l.onWindowUnload),l.documents.splice(n,1),r.documents.splice(n,1),o.fire("remove-document",{win:t,doc:e})},onWindowUnload:function(){l.removeDocument(this.document,this)}};t.exports=l},{"./utils":44,"./utils/Signals":34,"./utils/domObjects":38,"./utils/events":40,"./utils/window":52}],34:[function(e,t,n){"use strict";var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.listeners={}}return e.prototype.on=function(e,t){this.listeners[e]?this.listeners[e].push(t):this.listeners[e]=[t]},e.prototype.off=function(e,t){if(this.listeners[e]){var n=this.listeners[e].indexOf(t);-1!==n&&this.listeners[e].splice(n,1)}},e.prototype.fire=function(e,t){var n=this.listeners[e];if(n)for(var i=0;i<n.length;i++){var r=n[i];if(!1===r(t,e))return}},e}();i.new=function(){return new i},t.exports=i},{}],35:[function(e,t,n){"use strict";t.exports={contains:function(e,t){return-1!==e.indexOf(t)},merge:function(e,t){for(var n=0;n<t.length;n++){var i=t[n];e.push(i)}return e}}},{}],36:[function(e,t,n){"use strict";var i=e("./window"),r=i.window,o=e("./is"),s=e("./domObjects"),a=s.Element,l=r.navigator,c={supportsTouch:!!("ontouchstart"in r||o.function(r.DocumentTouch)&&s.document instanceof r.DocumentTouch),supportsPointerEvent:!!s.PointerEvent,isIOS:/iP(hone|od|ad)/.test(l.platform),isIOS7:/iP(hone|od|ad)/.test(l.platform)&&/OS 7[^\d]/.test(l.appVersion),isIe9:/MSIE 9/.test(l.userAgent),prefixedMatchesSelector:"matches"in a.prototype?"matches":"webkitMatchesSelector"in a.prototype?"webkitMatchesSelector":"mozMatchesSelector"in a.prototype?"mozMatchesSelector":"oMatchesSelector"in a.prototype?"oMatchesSelector":"msMatchesSelector",pEventTypes:s.PointerEvent?s.PointerEvent===r.MSPointerEvent?{up:"MSPointerUp",down:"MSPointerDown",over:"mouseover",out:"mouseout",move:"MSPointerMove",cancel:"MSPointerCancel"}:{up:"pointerup",down:"pointerdown",over:"pointerover",out:"pointerout",move:"pointermove",cancel:"pointercancel"}:null,wheelEvent:"onmousewheel"in s.document?"mousewheel":"wheel"};c.isOperaMobile="Opera"===l.appName&&c.supportsTouch&&l.userAgent.match("Presto"),t.exports=c},{"./domObjects":38,"./is":46,"./window":52}],37:[function(e,t,n){"use strict";var i=e("./is");t.exports=function e(t){var n={};for(var r in t)i.plainObject(t[r])?n[r]=e(t[r]):n[r]=t[r];return n}},{"./is":46}],38:[function(e,t,n){"use strict";var i={},r=e("./window").window;function o(){}i.document=r.document,i.DocumentFragment=r.DocumentFragment||o,i.SVGElement=r.SVGElement||o,i.SVGSVGElement=r.SVGSVGElement||o,i.SVGElementInstance=r.SVGElementInstance||o,i.Element=r.Element||o,i.HTMLElement=r.HTMLElement||i.Element,i.Event=r.Event,i.Touch=r.Touch||o,i.PointerEvent=r.PointerEvent||r.MSPointerEvent,t.exports=i},{"./window":52}],39:[function(e,t,n){"use strict";var i=e("./window"),r=e("./browser"),o=e("./is"),s=e("./domObjects"),a={nodeContains:function(e,t){for(;t;){if(t===e)return!0;t=t.parentNode}return!1},closest:function(e,t){for(;o.element(e);){if(a.matchesSelector(e,t))return e;e=a.parentNode(e)}return null},parentNode:function(e){var t=e.parentNode;if(o.docFrag(t)){for(;(t=t.host)&&o.docFrag(t););return t}return t},matchesSelector:function(e,t){return i.window!==i.realWindow&&(t=t.replace(/\/deep\//g," ")),e[r.prefixedMatchesSelector](t)},indexOfDeepestElement:function(e){var t=[],n=[],i=void 0,r=e[0],o=r?0:-1,a=void 0,l=void 0,c=void 0,u=void 0;for(c=1;c<e.length;c++)if((i=e[c])&&i!==r)if(r){if(i.parentNode!==i.ownerDocument)if(r.parentNode!==i.ownerDocument){if(!t.length)for(a=r;a.parentNode&&a.parentNode!==a.ownerDocument;)t.unshift(a),a=a.parentNode;if(r instanceof s.HTMLElement&&i instanceof s.SVGElement&&!(i instanceof s.SVGSVGElement)){if(i===r.parentNode)continue;a=i.ownerSVGElement}else a=i;for(n=[];a.parentNode!==a.ownerDocument;)n.unshift(a),a=a.parentNode;for(u=0;n[u]&&n[u]===t[u];)u++;var p=[n[u-1],n[u],t[u]];for(l=p[0].lastChild;l;){if(l===p[1]){r=i,o=c,t=[];break}if(l===p[2])break;l=l.previousSibling}}else r=i,o=c}else r=i,o=c;return o},matchesUpTo:function(e,t,n){for(;o.element(e);){if(a.matchesSelector(e,t))return!0;if((e=a.parentNode(e))===n)return a.matchesSelector(e,t)}return!1},getActualElement:function(e){return e instanceof s.SVGElementInstance?e.correspondingUseElement:e},getScrollXY:function(e){return{x:(e=e||i.window).scrollX||e.document.documentElement.scrollLeft,y:e.scrollY||e.document.documentElement.scrollTop}},getElementClientRect:function(e){var t=e instanceof s.SVGElement?e.getBoundingClientRect():e.getClientRects()[0];return t&&{left:t.left,right:t.right,top:t.top,bottom:t.bottom,width:t.width||t.right-t.left,height:t.height||t.bottom-t.top}},getElementRect:function(e){var t=a.getElementClientRect(e);if(!r.isIOS7&&t){var n=a.getScrollXY(i.getWindow(e));t.left+=n.x,t.right+=n.x,t.top+=n.y,t.bottom+=n.y}return t},getPath:function(e){for(var t=[];e;)t.push(e),e=a.parentNode(e);return t},trySelector:function(e){return!!o.string(e)&&(s.document.querySelector(e),!0)}};t.exports=a},{"./browser":36,"./domObjects":38,"./is":46,"./window":52}],40:[function(e,t,n){"use strict";var i,r=e("./is"),o=e("./domUtils"),s=e("./pointerUtils"),a=e("./pointerExtend"),l=e("./window"),c=l.window,u=e("./arr"),p=u.contains,f=[],d=[],h={},g=[],m=(i=!1,c.document.createElement("div").addEventListener("test",null,{get capture(){i=!0}}),i);function v(e,t,n,i){var r=w(i),o=f.indexOf(e),s=d[o];s||(s={events:{},typeCount:0},o=f.push(e)-1,d.push(s)),s.events[t]||(s.events[t]=[],s.typeCount++),p(s.events[t],n)||(e.addEventListener(t,n,m?r:!!r.capture),s.events[t].push(n))}function y(e,t,n,i){var r=w(i),o=f.indexOf(e),s=d[o];if(s&&s.events)if("all"!==t){if(s.events[t]){var a=s.events[t].length;if("all"===n){for(var l=0;l<a;l++)y(e,t,s.events[t][l],r);return}for(var c=0;c<a;c++)if(s.events[t][c]===n){e.removeEventListener("on"+t,n,m?r:!!r.capture),s.events[t].splice(c,1);break}s.events[t]&&0===s.events[t].length&&(s.events[t]=null,s.typeCount--)}s.typeCount||(d.splice(o,1),f.splice(o,1))}else for(t in s.events)s.events.hasOwnProperty(t)&&y(e,t,"all")}function b(e,t){var n=w(t),i={},l=h[e.type],c=s.getEventTargets(e),u=c[0],p=u;for(a(i,e),i.originalEvent=e,i.preventDefault=_;r.element(p);){for(var f=0;f<l.selectors.length;f++){var d=l.selectors[f],g=l.contexts[f];if(o.matchesSelector(p,d)&&o.nodeContains(g,u)&&o.nodeContains(g,p)){var m=l.listeners[f];i.currentTarget=p;for(var v=0;v<m.length;v++){var y=m[v],b=y[0],x=y[1],E=y[2];x===!!n.capture&&E===n.passive&&b(i)}}}p=o.parentNode(p)}}function x(e){return b.call(this,e,!0)}function _(){this.originalEvent.preventDefault()}function w(e){return r.object(e)?e:{capture:e}}t.exports={add:v,remove:y,addDelegate:function(e,t,n,i,r){var o=w(r);if(!h[n]){h[n]={selectors:[],contexts:[],listeners:[]};for(var s=0;s<g.length;s++){var a=g[s];v(a,n,b),v(a,n,x,!0)}}var l=h[n],c=void 0;for(c=l.selectors.length-1;c>=0&&(l.selectors[c]!==e||l.contexts[c]!==t);c--);-1===c&&(c=l.selectors.length,l.selectors.push(e),l.contexts.push(t),l.listeners.push([])),l.listeners[c].push([i,!!o.capture,o.passive])},removeDelegate:function(e,t,n,i,r){var o=w(r),s=h[n],a=!1,l=void 0;if(s)for(l=s.selectors.length-1;l>=0;l--)if(s.selectors[l]===e&&s.contexts[l]===t){for(var c=s.listeners[l],u=c.length-1;u>=0;u--){var p=c[u],f=p[0],d=p[1],g=p[2];if(f===i&&d===!!o.capture&&g===o.passive){c.splice(u,1),c.length||(s.selectors.splice(l,1),s.contexts.splice(l,1),s.listeners.splice(l,1),y(t,n,b),y(t,n,x,!0),s.selectors.length||(h[n]=null)),a=!0;break}}if(a)break}},delegateListener:b,delegateUseCapture:x,delegatedEvents:h,documents:g,supportsOptions:m,_elements:f,_targets:d}},{"./arr":35,"./domUtils":39,"./is":46,"./pointerExtend":48,"./pointerUtils":49,"./window":52}],41:[function(e,t,n){"use strict";t.exports=function(e,t){for(var n in t)e[n]=t[n];return e}},{}],42:[function(e,t,n){"use strict";var i=e("./rect"),r=i.resolveRectLike,o=i.rectToXY;t.exports=function(e,t,n){var i=e.options[n],s=i&&i.origin,a=s||e.options.origin,l=r(a,e,t,[e&&t]);return o(l)||{x:0,y:0}}},{"./rect":51}],43:[function(e,t,n){"use strict";t.exports=function(e,t){return Math.sqrt(e*e+t*t)}},{}],44:[function(e,t,n){"use strict";var i=e("./extend"),r=e("./window"),o={warnOnce:function(e,t){var n=!1;return function(){return n||(r.window.console.warn(t),n=!0),e.apply(this,arguments)}},_getQBezierValue:function(e,t,n,i){var r=1-e;return r*r*t+2*r*e*n+e*e*i},getQuadraticCurvePoint:function(e,t,n,i,r,s,a){return{x:o._getQBezierValue(a,e,n,r),y:o._getQBezierValue(a,t,i,s)}},easeOutQuad:function(e,t,n,i){return-n*(e/=i)*(e-2)+t},copyAction:function(e,t){return e.name=t.name,e.axis=t.axis,e.edges=t.edges,e},is:e("./is"),extend:i,hypot:e("./hypot"),getOriginXY:e("./getOriginXY")};i(o,e("./arr")),i(o,e("./domUtils")),i(o,e("./pointerUtils")),i(o,e("./rect")),t.exports=o},{"./arr":35,"./domUtils":39,"./extend":41,"./getOriginXY":42,"./hypot":43,"./is":46,"./pointerUtils":49,"./rect":51,"./window":52}],45:[function(e,t,n){"use strict";var i=e("../scope"),r=e("./index"),o={methodOrder:["simulationResume","mouseOrPen","hasPointer","idle"],search:function(e,t,n){for(var i=r.getPointerType(e),s=r.getPointerId(e),a={pointer:e,pointerId:s,pointerType:i,eventType:t,eventTarget:n},l=0;l<o.methodOrder.length;l++){var c=o.methodOrder[l],u=o[c](a);if(u)return u}},simulationResume:function(e){var t=e.pointerType,n=e.eventType,o=e.eventTarget;if(!/down|start/i.test(n))return null;for(var s=0;s<i.interactions.length;s++){var a=i.interactions[s],l=o;if(a.simulation&&a.simulation.allowResume&&a.pointerType===t)for(;l;){if(l===a.element)return a;l=r.parentNode(l)}}return null},mouseOrPen:function(e){var t=e.pointerId,n=e.pointerType,o=e.eventType;if("mouse"!==n&&"pen"!==n)return null;for(var s=void 0,a=0;a<i.interactions.length;a++){var l=i.interactions[a];if(l.pointerType===n){if(l.simulation&&!r.contains(l.pointerIds,t))continue;if(l.interacting())return l;s||(s=l)}}if(s)return s;for(var c=0;c<i.interactions.length;c++){var u=i.interactions[c];if(!(u.pointerType!==n||/down/i.test(o)&&u.simulation))return u}return null},hasPointer:function(e){for(var t=e.pointerId,n=0;n<i.interactions.length;n++){var o=i.interactions[n];if(r.contains(o.pointerIds,t))return o}},idle:function(e){for(var t=e.pointerType,n=0;n<i.interactions.length;n++){var r=i.interactions[n];if(1===r.pointerIds.length){var o=r.target;if(o&&!o.options.gesture.enabled)continue}else if(r.pointerIds.length>=2)continue;if(!r.interacting()&&t===r.pointerType)return r}return null}};t.exports=o},{"../scope":33,"./index":44}],46:[function(e,t,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=e("./window"),o=e("./isWindow"),s={array:function(){},window:function(e){return e===r.window||o(e)},docFrag:function(e){return s.object(e)&&11===e.nodeType},object:function(e){return!!e&&"object"===(void 0===e?"undefined":i(e))},function:function(e){return"function"==typeof e},number:function(e){return"number"==typeof e},bool:function(e){return"boolean"==typeof e},string:function(e){return"string"==typeof e},element:function(e){if(!e||"object"!==(void 0===e?"undefined":i(e)))return!1;var t=r.getWindow(e)||r.window;return/object|function/.test(i(t.Element))?e instanceof t.Element:1===e.nodeType&&"string"==typeof e.nodeName},plainObject:function(e){return s.object(e)&&"Object"===e.constructor.name}};s.array=function(e){return s.object(e)&&void 0!==e.length&&s.function(e.splice)},t.exports=s},{"./isWindow":47,"./window":52}],47:[function(e,t,n){"use strict";t.exports=function(e){return!(!e||!e.Window)&&e instanceof e.Window}},{}],48:[function(e,t,n){"use strict";function i(e,n){for(var i in n){var r=t.exports.prefixedPropREs,o=!1;for(var s in r)if(0===i.indexOf(s)&&r[s].test(i)){o=!0;break}o||"function"==typeof n[i]||(e[i]=n[i])}return e}i.prefixedPropREs={webkit:/(Movement[XY]|Radius[XY]|RotationAngle|Force)$/},t.exports=i},{}],49:[function(e,t,n){"use strict";var i=e("./hypot"),r=e("./browser"),o=e("./domObjects"),s=e("./domUtils"),a=e("./domObjects"),l=e("./is"),c=e("./pointerExtend"),u={copyCoords:function(e,t){e.page=e.page||{},e.page.x=t.page.x,e.page.y=t.page.y,e.client=e.client||{},e.client.x=t.client.x,e.client.y=t.client.y,e.timeStamp=t.timeStamp},setCoordDeltas:function(e,t,n){e.page.x=n.page.x-t.page.x,e.page.y=n.page.y-t.page.y,e.client.x=n.client.x-t.client.x,e.client.y=n.client.y-t.client.y,e.timeStamp=n.timeStamp-t.timeStamp;var r=Math.max(e.timeStamp/1e3,.001);e.page.speed=i(e.page.x,e.page.y)/r,e.page.vx=e.page.x/r,e.page.vy=e.page.y/r,e.client.speed=i(e.client.x,e.page.y)/r,e.client.vx=e.client.x/r,e.client.vy=e.client.y/r},isNativePointer:function(e){return e instanceof o.Event||e instanceof o.Touch},getXY:function(e,t,n){return n=n||{},e=e||"page",n.x=t[e+"X"],n.y=t[e+"Y"],n},getPageXY:function(e,t){return t=t||{},r.isOperaMobile&&u.isNativePointer(e)?(u.getXY("screen",e,t),t.x+=window.scrollX,t.y+=window.scrollY):u.getXY("page",e,t),t},getClientXY:function(e,t){return t=t||{},r.isOperaMobile&&u.isNativePointer(e)?u.getXY("screen",e,t):u.getXY("client",e,t),t},getPointerId:function(e){return l.number(e.pointerId)?e.pointerId:e.identifier},setCoords:function(e,t,n){var i=t.length>1?u.pointerAverage(t):t[0],r={};u.getPageXY(i,r),e.page.x=r.x,e.page.y=r.y,u.getClientXY(i,r),e.client.x=r.x,e.client.y=r.y,e.timeStamp=l.number(n)?n:(new Date).getTime()},pointerExtend:c,getTouchPair:function(e){var t=[];return l.array(e)?(t[0]=e[0],t[1]=e[1]):"touchend"===e.type?1===e.touches.length?(t[0]=e.touches[0],t[1]=e.changedTouches[0]):0===e.touches.length&&(t[0]=e.changedTouches[0],t[1]=e.changedTouches[1]):(t[0]=e.touches[0],t[1]=e.touches[1]),t},pointerAverage:function(e){for(var t={pageX:0,pageY:0,clientX:0,clientY:0,screenX:0,screenY:0},n=0;n<e.length;n++){var i=e[n];for(var r in t)t[r]+=i[r]}for(var o in t)t[o]/=e.length;return t},touchBBox:function(e){if(e.length||e.touches&&e.touches.length>1){var t=u.getTouchPair(e),n=Math.min(t[0].pageX,t[1].pageX),i=Math.min(t[0].pageY,t[1].pageY),r=Math.max(t[0].pageX,t[1].pageX),o=Math.max(t[0].pageY,t[1].pageY);return{x:n,y:i,left:n,top:i,width:r-n,height:o-i}}},touchDistance:function(e,t){var n=t+"X",r=t+"Y",o=u.getTouchPair(e),s=o[0][n]-o[1][n],a=o[0][r]-o[1][r];return i(s,a)},touchAngle:function(e,t,n){var i=n+"X",r=n+"Y",o=u.getTouchPair(e),s=o[1][i]-o[0][i],a=o[1][r]-o[0][r],l=180*Math.atan2(a,s)/Math.PI;return l},getPointerType:function(e){return l.string(e.pointerType)?e.pointerType:l.number(e.pointerType)?[void 0,void 0,"touch","pen","mouse"][e.pointerType]:/touch/.test(e.type)||e instanceof a.Touch?"touch":"mouse"},getEventTargets:function(e){var t=l.function(e.composedPath)?e.composedPath():e.path;return[s.getActualElement(t?t[0]:e.target),s.getActualElement(e.currentTarget)]}};t.exports=u},{"./browser":36,"./domObjects":38,"./domUtils":39,"./hypot":43,"./is":46,"./pointerExtend":48}],50:[function(e,t,n){"use strict";for(var i=e("./window"),r=i.window,o=["ms","moz","webkit","o"],s=0,a=void 0,l=void 0,c=0;c<o.length&&!r.requestAnimationFrame;c++)a=r[o[c]+"RequestAnimationFrame"],l=r[o[c]+"CancelAnimationFrame"]||r[o[c]+"CancelRequestAnimationFrame"];a||(a=function(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-s)),i=setTimeout(function(){e(t+n)},n);return s=t+n,i}),l||(l=function(e){clearTimeout(e)}),t.exports={request:a,cancel:l}},{"./window":52}],51:[function(e,t,n){"use strict";var i=e("./extend"),r=e("./is"),o=e("./domUtils"),s=o.closest,a=o.parentNode,l=o.getElementRect,c={getStringOptionResult:function(e,t,n){return r.string(e)?e="parent"===e?a(n):"self"===e?t.getRect(n):s(n,e):null},resolveRectLike:function(e,t,n,i){return e=c.getStringOptionResult(e,t,n)||e,r.function(e)&&(e=e.apply(null,i)),r.element(e)&&(e=l(e)),e},rectToXY:function(e){return e&&{x:"x"in e?e.x:e.left,y:"y"in e?e.y:e.top}},xywhToTlbr:function(e){return!e||"left"in e&&"top"in e||((e=i({},e)).left=e.x||0,e.top=e.y||0,e.right=e.right||e.left+e.width,e.bottom=e.bottom||e.top+e.height),e},tlbrToXywh:function(e){return!e||"x"in e&&"y"in e||((e=i({},e)).x=e.left||0,e.top=e.top||0,e.width=e.width||e.right-e.x,e.height=e.height||e.bottom-e.y),e}};t.exports=c},{"./domUtils":39,"./extend":41,"./is":46}],52:[function(e,t,n){"use strict";var i=t.exports,r=e("./isWindow");function o(e){i.realWindow=e;var t=e.document.createTextNode("");t.ownerDocument!==e.document&&"function"==typeof e.wrap&&e.wrap(t)===t&&(e=e.wrap(e)),i.window=e}"undefined"==typeof window?(i.window=void 0,i.realWindow=void 0):o(window),i.getWindow=function(e){if(r(e))return e;var t=e.ownerDocument||e;return t.defaultView||t.parentWindow||i.window},i.init=o},{"./isWindow":47}]},{},[1])(1)},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.loadWidgets=function(){e.get("get_widget",function(t){e.each(t,function(e,t){l(e,t.name,t.topic,t.type,t.msg_type,t.x,t.y,t.width,t.height)})},"json").done(function(){}).fail(function(){}).always(function(){})},t.createWidget=l;var i=o(n(30)),r=o(n(14));function o(e){return e&&e.__esModule?e:{default:e}}var s=n(15),a=!1;function l(e,t,n,i,o,a,l,c,u){var p="";p=0==i?'\n    <div id="'.concat(e,'" topic="').concat(n,'" class="draggable dragging-container" draggable="1" style="width: ').concat(c,"; height: ").concat(u,'">\n    <div class="card text-white bg-dark mb-3" style="max-width: 18rem;">\n    <div class="card-header"><kbd>').concat(n,"</kbd> (").concat(o,')</div>\n    <div class="card-body">\n    <form class="publishForm">\n    <input type="hidden" name="topic" value="').concat(n,'">\n    <input type="hidden" name="msg_type" value="').concat(o,'">\n    <div class="form-group">\n    <label for="pub" class="col-form-label">Publish</label>\n    <input name="pub" class="form-control" id="pub"></input>\n    </div>\n    <button type="submit" class="btn btn-primary">Publish</button>\n    </form>\n    </div>\n    </div>\n    </div>\n    '):'\n    <div id="'.concat(e,'" topic="').concat(n,'" class="draggable dragging-container" draggable="1" style="width: ').concat(c,"; height: ").concat(u,'">\n    <div class="card text-white bg-dark mb-3" style="max-width: 18rem;">\n    <div class="card-header"><kbd>').concat(e,"</kbd> (").concat(o,')</div>\n    <div class="card-body">\n    <p class="card-text output"></p>\n    </div>\n    </div>\n    </div>\n    '),document.getElementById("widgets").insertAdjacentHTML("beforeend",p);var f=document.getElementById(e);if(f.style.webkitTransform=f.style.transform="translate("+a+"px,"+l+"px)",f.setAttribute("data-x",a),f.setAttribute("data-y",l),1==i){var d=new r.default.Topic({ros:s.ros,name:n,messageType:o});d.subscribe(function(e){s.addMessage(d.name,e)})}}function c(t){var n=t.target;!function(t,n,i,r,o){var s=new Object;s.name=t,s.x=n,s.y=i,s.width=r,s.height=o,e.post("set_widget",s,function(e){}).done(function(){}).fail(function(){}).always(function(){})}(n.getAttribute("id"),(parseFloat(n.getAttribute("data-x"))||0)+t.dx,(parseFloat(n.getAttribute("data-y"))||0)+t.dy,n.style.width,n.style.height)}function u(e){var t=e.target,n=parseFloat(t.getAttribute("data-x"))||0,i=parseFloat(t.getAttribute("data-y"))||0;t.style.width=e.rect.width+"px",t.style.height=e.rect.height+"px",n+=e.deltaRect.left,i+=e.deltaRect.top,t.style.webkitTransform=t.style.transform="translate("+n+"px,"+i+"px)",t.setAttribute("data-x",n),t.setAttribute("data-y",i)}function p(e){var t=e.target,n=(parseFloat(t.getAttribute("data-x"))||0)+e.dx,i=(parseFloat(t.getAttribute("data-y"))||0)+e.dy;t.style.webkitTransform=t.style.transform="translate("+n+"px, "+i+"px)",t.setAttribute("data-x",n),t.setAttribute("data-y",i)}e("#newWidgetButton").on("click",function(){s.getTopics()}),e("#newWidgetForm").submit(function(t){t.preventDefault(),e("#widgetModal").modal("toggle");var n=e(this).serialize();console.log(n);e.post("create_widget",n).done(function(e){l(e.key,e.name,e.topic,e.type,e.msg_type,e.x,e.y,e.width,e.height)}).fail(function(){}).always(function(){})}),e("#editMode").on("click",function(t){(a=!a)?(e(this).removeClass("btn-success"),e(this).addClass("btn-danger")):(e(this).removeClass("btn-danger"),e(this).addClass("btn-success")),(0,i.default)(".draggable").draggable({enabled:a,inertia:!0,restrict:{restriction:"parent",endOnly:!0},autoScroll:!0,onmove:p,onend:c}).resizable({enabled:a,edges:{left:!0,right:!0,bottom:!0,top:!0},onmove:u,onend:c})})}).call(this,n(6))},function(e,t,n){(function(e){t.DOMImplementation=e.DOMImplementation,t.XMLSerializer=e.XMLSerializer,t.DOMParser=e.DOMParser}).call(this,n(10))},function(e,t){e.exports=function(e){this.name=e.xml.getAttribute("name"),this.type=e.xml.getAttribute("type");var t=e.xml.getElementsByTagName("parent");t.length>0&&(this.parent=t[0].getAttribute("link"));var n=e.xml.getElementsByTagName("child");n.length>0&&(this.child=n[0].getAttribute("link"));var i=e.xml.getElementsByTagName("limit");i.length>0&&(this.minval=parseFloat(i[0].getAttribute("lower")),this.maxval=parseFloat(i[0].getAttribute("upper")))}},function(e,t,n){var i=n(11),r=n(19),o=n(33),s=n(32).DOMParser;e.exports=function(e){var t=(e=e||{}).xml,n=e.string;this.materials={},this.links={},this.joints={},n&&(t=(new s).parseFromString(n,"text/xml"));var a=t.documentElement;this.name=a.getAttribute("name");for(var l=a.childNodes,c=0;c<l.length;c++){var u=l[c];if("material"===u.tagName){var p=new i({xml:u});void 0!==this.materials[p.name]?this.materials[p.name].isLink()?this.materials[p.name].assign(p):console.warn("Material "+p.name+"is not unique."):this.materials[p.name]=p}else if("link"===u.tagName){var f=new r({xml:u});if(void 0!==this.links[f.name])console.warn("Link "+f.name+" is not unique.");else{for(var d=0;d<f.visuals.length;d++){var h=f.visuals[d].material;null!==h&&(void 0!==this.materials[h.name]?f.visuals[d].material=this.materials[h.name]:this.materials[h.name]=h)}this.links[f.name]=f}}else if("joint"===u.tagName){var g=new o({xml:u});this.joints[g.name]=g}}}},function(e,t,n){e.exports=n(1)({UrdfBox:n(22),UrdfColor:n(21),UrdfCylinder:n(20),UrdfLink:n(19),UrdfMaterial:n(11),UrdfMesh:n(17),UrdfModel:n(34),UrdfSphere:n(16),UrdfVisual:n(18)},n(4))},function(e,t,n){n(26);var i=n(25),r=(n(9),n(5)),o=n(23);function s(e){e=e||{},this.ros=e.ros,this.fixedFrame=e.fixedFrame||"/base_link",this.angularThres=e.angularThres||2,this.transThres=e.transThres||.01,this.rate=e.rate||10,this.updateDelay=e.updateDelay||50;var t=e.topicTimeout||2,n=Math.floor(t),i=Math.floor(1e9*(t-n));this.topicTimeout={secs:n,nsecs:i},this.serverName=e.serverName||"/tf2_web_republisher",this.repubServiceName=e.repubServiceName||"/republish_tfs",this.currentGoal=!1,this.currentTopic=!1,this.frameInfos={},this.republisherUpdateRequested=!1,this.actionClient=this.ros.ActionClient({serverName:this.serverName,actionName:"tf2_web_republisher/TFSubscriptionAction",omitStatus:!0,omitResult:!0}),this.serviceClient=this.ros.Service({name:this.repubServiceName,serviceType:"tf2_web_republisher/RepublishTFs"})}s.prototype.processTFArray=function(e){e.transforms.forEach(function(e){var t=e.child_frame_id;"/"===t[0]&&(t=t.substring(1));var n=this.frameInfos[t];n&&(n.transform=new o({translation:e.transform.translation,rotation:e.transform.rotation}),n.cbs.forEach(function(e){e(n.transform)}))},this)},s.prototype.updateGoal=function(){var e={source_frames:Object.keys(this.frameInfos),target_frame:this.fixedFrame,angular_thres:this.angularThres,trans_thres:this.transThres,rate:this.rate};if(this.ros.groovyCompatibility)this.currentGoal&&this.currentGoal.cancel(),this.currentGoal=new i({actionClient:this.actionClient,goalMessage:e}),this.currentGoal.on("feedback",this.processTFArray.bind(this)),this.currentGoal.send();else{e.timeout=this.topicTimeout;var t=new r(e);this.serviceClient.callService(t,this.processResponse.bind(this))}this.republisherUpdateRequested=!1},s.prototype.processResponse=function(e){this.currentTopic&&this.currentTopic.unsubscribe(),this.currentTopic=this.ros.Topic({name:e.topic_name,messageType:"tf2_web_republisher/TFArray"}),this.currentTopic.subscribe(this.processTFArray.bind(this))},s.prototype.subscribe=function(e,t){"/"===e[0]&&(e=e.substring(1)),this.frameInfos[e]?this.frameInfos[e].transform&&t(this.frameInfos[e].transform):(this.frameInfos[e]={cbs:[]},this.republisherUpdateRequested||(setTimeout(this.updateGoal.bind(this),this.updateDelay),this.republisherUpdateRequested=!0)),this.frameInfos[e].cbs.push(t)},s.prototype.unsubscribe=function(e,t){"/"===e[0]&&(e=e.substring(1));for(var n=this.frameInfos[e],i=n&&n.cbs||[],r=i.length;r--;)i[r]===t&&i.splice(r,1);t&&0!==i.length||delete this.frameInfos[e]},s.prototype.dispose=function(){this.actionClient.dispose(),this.currentTopic&&this.currentTopic.unsubscribe()},e.exports=s},function(e,t,n){var i=n(12);n(13)(i,["TFClient"],e.exports={TFClient:n(36)})},function(e,t,n){e.exports={Pose:n(24),Quaternion:n(7),Transform:n(23),Vector3:n(2)}},function(e,t,n){var i=n(8),r=n(3),o=n(0).EventEmitter2;function s(e){var t=this;e=e||{},this.ros=e.ros,this.serverName=e.serverName,this.actionName=e.actionName,this.feedbackPublisher=new i({ros:this.ros,name:this.serverName+"/feedback",messageType:this.actionName+"Feedback"}),this.feedbackPublisher.advertise();var n=new i({ros:this.ros,name:this.serverName+"/status",messageType:"actionlib_msgs/GoalStatusArray"});n.advertise(),this.resultPublisher=new i({ros:this.ros,name:this.serverName+"/result",messageType:this.actionName+"Result"}),this.resultPublisher.advertise();var o=new i({ros:this.ros,name:this.serverName+"/goal",messageType:this.actionName+"Goal"}),s=new i({ros:this.ros,name:this.serverName+"/cancel",messageType:"actionlib_msgs/GoalID"});this.statusMessage=new r({header:{stamp:{secs:0,nsecs:100},frame_id:""},status_list:[]}),this.currentGoal=null,this.nextGoal=null,o.subscribe(function(e){t.currentGoal?(t.nextGoal=e,t.emit("cancel")):(t.statusMessage.status_list=[{goal_id:e.goal_id,status:1}],t.currentGoal=e,t.emit("goal",e.goal))});var a=function(e,t){return!(e.secs>t.secs)&&(e.secs<t.secs||e.nsecs<t.nsecs)};s.subscribe(function(e){0===e.stamp.secs&&0===e.stamp.secs&&""===e.id?(t.nextGoal=null,t.currentGoal&&t.emit("cancel")):(t.currentGoal&&e.id===t.currentGoal.goal_id.id?t.emit("cancel"):t.nextGoal&&e.id===t.nextGoal.goal_id.id&&(t.nextGoal=null),t.nextGoal&&a(t.nextGoal.goal_id.stamp,e.stamp)&&(t.nextGoal=null),t.currentGoal&&a(t.currentGoal.goal_id.stamp,e.stamp)&&t.emit("cancel"))});setInterval(function(){var e=new Date,i=Math.floor(e.getTime()/1e3),r=Math.round(1e9*(e.getTime()/1e3-i));t.statusMessage.header.stamp.secs=i,t.statusMessage.header.stamp.nsecs=r,n.publish(t.statusMessage)},500)}s.prototype.__proto__=o.prototype,s.prototype.setSucceeded=function(e){var t=new r({status:{goal_id:this.currentGoal.goal_id,status:3},result:e});this.resultPublisher.publish(t),this.statusMessage.status_list=[],this.nextGoal?(this.currentGoal=this.nextGoal,this.nextGoal=null,this.emit("goal",this.currentGoal.goal)):this.currentGoal=null},s.prototype.sendFeedback=function(e){var t=new r({status:{goal_id:this.currentGoal.goal_id,status:1},feedback:e});this.feedbackPublisher.publish(t)},s.prototype.setPreempted=function(){this.statusMessage.status_list=[];var e=new r({status:{goal_id:this.currentGoal.goal_id,status:2}});this.resultPublisher.publish(e),this.nextGoal?(this.currentGoal=this.nextGoal,this.nextGoal=null,this.emit("goal",this.currentGoal.goal)):this.currentGoal=null},e.exports=s},function(e,t,n){var i=n(8),r=(n(3),n(0).EventEmitter2);function o(e){var t=this;e=e||{},this.ros=e.ros,this.serverName=e.serverName,this.actionName=e.actionName,this.timeout=e.timeout,this.omitFeedback=e.omitFeedback,this.omitStatus=e.omitStatus,this.omitResult=e.omitResult;var n=new i({ros:this.ros,name:this.serverName+"/goal",messageType:this.actionName+"Goal"}),r=new i({ros:this.ros,name:this.serverName+"/feedback",messageType:this.actionName+"Feedback"}),o=new i({ros:this.ros,name:this.serverName+"/status",messageType:"actionlib_msgs/GoalStatusArray"}),s=new i({ros:this.ros,name:this.serverName+"/result",messageType:this.actionName+"Result"});n.subscribe(function(e){t.emit("goal",e)}),o.subscribe(function(e){e.status_list.forEach(function(e){t.emit("status",e)})}),r.subscribe(function(e){t.emit("status",e.status),t.emit("feedback",e.feedback)}),s.subscribe(function(e){t.emit("status",e.status),t.emit("result",e.result)})}o.prototype.__proto__=r.prototype,e.exports=o},function(e,t,n){var i=n(12);n(13)(i,["ActionClient","SimpleActionServer"],e.exports={ActionClient:n(26),ActionListener:n(40),Goal:n(25),SimpleActionServer:n(39)})},function(e,t,n){var i=n(9),r=n(5);function o(e){e=e||{},this.ros=e.ros,this.name=e.name}o.prototype.get=function(e){var t=new i({ros:this.ros,name:"/rosapi/get_param",serviceType:"rosapi/GetParam"}),n=new r({name:this.name});t.callService(n,function(t){var n=JSON.parse(t.value);e(n)})},o.prototype.set=function(e,t){var n=new i({ros:this.ros,name:"/rosapi/set_param",serviceType:"rosapi/SetParam"}),o=new r({name:this.name,value:JSON.stringify(e)});n.callService(o,t)},o.prototype.delete=function(e){var t=new i({ros:this.ros,name:"/rosapi/delete_param",serviceType:"rosapi/DeleteParam"}),n=new r({name:this.name});t.callService(n,e)},e.exports=o},function(e,t){e.exports=function(){return document.createElement("canvas")}},function(e,t,n){"use strict";(function(t){var i=n(43),r=i.Image||t.Image;e.exports=function(e,t){var n=new r;n.onload=function(){var e=new i,r=e.getContext("2d");e.width=n.width,e.height=n.height,r.imageSmoothingEnabled=!1,r.webkitImageSmoothingEnabled=!1,r.mozImageSmoothingEnabled=!1,r.drawImage(n,0,0);for(var o=r.getImageData(0,0,n.width,n.height).data,s="",a=0;a<o.length;a+=4)s+=String.fromCharCode(o[a],o[a+1],o[a+2]);t(JSON.parse(s))},n.src="data:image/png;base64,"+e}}).call(this,n(10))},function(e,t,n){"use strict";var i=n(44),r=(n(28),null);"undefined"!=typeof bson&&(r=bson().BSON),e.exports=function(e){function t(t){"publish"===t.op?e.emit(t.topic,t.msg):"service_response"===t.op?e.emit(t.id,t):"call_service"===t.op?e.emit(t.service,t):"status"===t.op&&(t.id?e.emit("status:"+t.id,t):e.emit("status",t))}function n(e,t){"png"===e.op?i(e.data,t):t(e)}return{onopen:function(t){e.isConnected=!0,e.emit("connection",t)},onclose:function(t){e.isConnected=!1,e.emit("close",t)},onerror:function(t){e.emit("error",t)},onmessage:function(e){"undefined"!=typeof Blob&&e.data instanceof Blob?function(e,t){if(!r)throw"Cannot process BSON encoded message without BSON header.";var n=new FileReader;n.onload=function(){var e=new Uint8Array(this.result),n=r.deserialize(e);t(n)},n.readAsArrayBuffer(e)}(e.data,function(e){n(e,t)}):n(JSON.parse("string"==typeof e?e:e.data),t)}}}},function(e,t,n){var i=n(13),r=e.exports={Ros:n(12),Topic:n(8),Message:n(3),Param:n(42),Service:n(9),ServiceRequest:n(5),ServiceResponse:n(27)};i(r.Ros,["Param","Service","Topic"],r)},function(e,t,n){"use strict";n.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,i=["Edge","Trident","Firefox"],r=0,o=0;o<i.length;o+=1)if(n&&navigator.userAgent.indexOf(i[o])>=0){r=1;break}var s=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},r))}};function a(e){return e&&"[object Function]"==={}.toString.call(e)}function l(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function c(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function u(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=l(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?e:u(c(e))}var p=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?p:10===e?f:p||f}function h(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===l(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function g(e){return null!==e.parentNode?g(e.parentNode):e}function m(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,r=n?t:e,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var s,a,l=o.commonAncestorContainer;if(e!==l&&t!==l||i.contains(r))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&h(s.firstElementChild)!==s?h(l):l;var c=g(e);return c.host?m(c.host,t):m(e,g(t).host)}function v(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var i=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||i)[t]}return e[t]}function y(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+i+"Width"],10)}function b(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function x(){var e=document.body,t=document.documentElement,n=d(10)&&getComputedStyle(t);return{height:b("Height",e,t,n),width:b("Width",e,t,n)}}var _=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},w=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function C(e){return T({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var n=v(e,"top"),i=v(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}else t=e.getBoundingClientRect()}catch(e){}var r={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?x():{},s=o.width||e.clientWidth||r.right-r.left,a=o.height||e.clientHeight||r.bottom-r.top,c=e.offsetWidth-s,u=e.offsetHeight-a;if(c||u){var p=l(e);c-=y(p,"x"),u-=y(p,"y"),r.width-=c,r.height-=u}return C(r)}function A(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=d(10),r="HTML"===t.nodeName,o=S(e),s=S(t),a=u(e),c=l(t),p=parseFloat(c.borderTopWidth,10),f=parseFloat(c.borderLeftWidth,10);n&&"HTML"===t.nodeName&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var h=C({top:o.top-s.top-p,left:o.left-s.left-f,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!i&&r){var g=parseFloat(c.marginTop,10),m=parseFloat(c.marginLeft,10);h.top-=p-g,h.bottom-=p-g,h.left-=f-m,h.right-=f-m,h.marginTop=g,h.marginLeft=m}return(i&&!n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=v(t,"top"),r=v(t,"left"),o=n?-1:1;return e.top+=i*o,e.bottom+=i*o,e.left+=r*o,e.right+=r*o,e}(h,t)),h}function D(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===l(t,"transform");)t=t.parentElement;return t||document.documentElement}function O(e,t,n,i){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=r?D(e):m(e,t);if("viewport"===i)o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,i=A(e,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),s=t?0:v(n),a=t?0:v(n,"left");return C({top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:r,height:o})}(s,r);else{var a=void 0;"scrollParent"===i?"BODY"===(a=u(c(t))).nodeName&&(a=e.ownerDocument.documentElement):a="window"===i?e.ownerDocument.documentElement:i;var p=A(a,s,r);if("HTML"!==a.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===l(t,"position")||e(c(t)))}(s))o=p;else{var f=x(),d=f.height,h=f.width;o.top+=p.top-p.marginTop,o.bottom=d+p.top,o.left+=p.left-p.marginLeft,o.right=h+p.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function I(e,t,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var s=O(n,i,o,r),a={top:{width:s.width,height:t.top-s.top},right:{width:s.right-t.right,height:s.height},bottom:{width:s.width,height:s.bottom-t.bottom},left:{width:t.left-s.left,height:s.height}},l=Object.keys(a).map(function(e){return T({key:e},a[e],{area:(t=a[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,p=e.split("-")[1];return u+(p?"-"+p:"")}function N(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return A(n,i?D(t):m(t,n),i)}function k(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function P(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function L(e,t,n){n=n.split("-")[0];var i=k(e),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[s]=t[s]+t[l]/2-i[l]/2,r[a]=n===a?t[a]-i[c]:t[P(a)],r}function M(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function R(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=M(e,function(e){return e[t]===n});return e.indexOf(i)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&a(n)&&(t.offsets.popper=C(t.offsets.popper),t.offsets.reference=C(t.offsets.reference),t=n(t,e))}),t}function j(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function F(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==document.body.style[o])return o}return null}function H(e){var t=e.ownerDocument;return t?t.defaultView:window}function W(e,t,n,i){n.updateBound=i,H(e).addEventListener("resize",n.updateBound,{passive:!0});var r=u(e);return function e(t,n,i,r){var o="BODY"===t.nodeName,s=o?t.ownerDocument.defaultView:t;s.addEventListener(n,i,{passive:!0}),o||e(u(s.parentNode),n,i,r),r.push(s)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function z(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,H(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function q(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&U(t[n])&&(i="px"),e.style[n]=t[n]+i})}function B(e,t,n){var i=M(e,function(e){return e.name===t}),r=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!r){var o="`"+t+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var G=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=G.slice(3);function Y(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=V.indexOf(e),i=V.slice(n+1).concat(V.slice(0,n));return t?i.reverse():i}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function K(e,t,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),s=e.split(/(\+|\-)/).map(function(e){return e.trim()}),a=s.indexOf(M(s,function(e){return-1!==e.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return(c=c.map(function(e,i){var r=(1===i?!o:o)?"height":"width",s=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,s=!0,e):s?(e[e.length-1]+=t,s=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return e;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return C(a)[t]/100*o}if("vh"===s||"vw"===s)return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,r,t,n)})})).forEach(function(e,t){e.forEach(function(n,i){U(n)&&(r[t]+=n*("-"===e[i-1]?-1:1))})}),r}var $={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var r=e.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",u={start:E({},l,o[l]),end:E({},l,o[l]+o[c]-s[c])};e.offsets.popper=T({},s,u[i])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,i=e.placement,r=e.offsets,o=r.popper,s=r.reference,a=i.split("-")[0],l=void 0;return l=U(+n)?[+n,0]:K(n,o,s,a),"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var i=F("transform"),r=e.instance.popper.style,o=r.top,s=r.left,a=r[i];r.top="",r.left="",r[i]="";var l=O(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);r.top=o,r.left=s,r[i]=a,t.boundaries=l;var c=t.priority,u=e.offsets.popper,p={primary:function(e){var n=u[e];return u[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(u[e],l[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",i=u[n];return u[e]>l[e]&&!t.escapeWithReference&&(i=Math.min(u[n],l[e]-("right"===e?u.width:u.height))),E({},n,i)}};return c.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";u=T({},u,p[t](e))}),e.offsets.popper=u,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<o(i[l])&&(e.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[a])&&(e.offsets.popper[l]=o(i[a])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!B(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,s=o.popper,a=o.reference,c=-1!==["left","right"].indexOf(r),u=c?"height":"width",p=c?"Top":"Left",f=p.toLowerCase(),d=c?"left":"top",h=c?"bottom":"right",g=k(i)[u];a[h]-g<s[f]&&(e.offsets.popper[f]-=s[f]-(a[h]-g)),a[f]+g>s[h]&&(e.offsets.popper[f]+=a[f]+g-s[h]),e.offsets.popper=C(e.offsets.popper);var m=a[f]+a[u]/2-g/2,v=l(e.instance.popper),y=parseFloat(v["margin"+p],10),b=parseFloat(v["border"+p+"Width"],10),x=m-e.offsets.popper[f]-y-b;return x=Math.max(Math.min(s[u]-g,x),0),e.arrowElement=i,e.offsets.arrow=(E(n={},f,Math.round(x)),E(n,d,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(j(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=O(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),i=e.placement.split("-")[0],r=P(i),o=e.placement.split("-")[1]||"",s=[];switch(t.behavior){case X.FLIP:s=[i,r];break;case X.CLOCKWISE:s=Y(i);break;case X.COUNTERCLOCKWISE:s=Y(i,!0);break;default:s=t.behavior}return s.forEach(function(a,l){if(i!==a||s.length===l+1)return e;i=e.placement.split("-")[0],r=P(i);var c=e.offsets.popper,u=e.offsets.reference,p=Math.floor,f="left"===i&&p(c.right)>p(u.left)||"right"===i&&p(c.left)<p(u.right)||"top"===i&&p(c.bottom)>p(u.top)||"bottom"===i&&p(c.top)<p(u.bottom),d=p(c.left)<p(n.left),h=p(c.right)>p(n.right),g=p(c.top)<p(n.top),m=p(c.bottom)>p(n.bottom),v="left"===i&&d||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,y=-1!==["top","bottom"].indexOf(i),b=!!t.flipVariations&&(y&&"start"===o&&d||y&&"end"===o&&h||!y&&"start"===o&&g||!y&&"end"===o&&m);(f||v||b)&&(e.flipped=!0,(f||v)&&(i=s[l+1]),b&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=i+(o?"-"+o:""),e.offsets.popper=T({},e.offsets.popper,L(e.instance.popper,e.offsets.reference,e.placement)),e=R(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,o=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=o[n]-(a?r[s?"width":"height"]:0),e.placement=P(t),e.offsets.popper=C(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!B(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=M(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,r=e.offsets.popper,o=M(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:t.gpuAcceleration,a=S(h(e.instance.popper)),l={position:r.position},c={left:Math.floor(r.left),top:Math.round(r.top),bottom:Math.round(r.bottom),right:Math.floor(r.right)},u="bottom"===n?"top":"bottom",p="right"===i?"left":"right",f=F("transform"),d=void 0,g=void 0;if(g="bottom"===u?-a.height+c.bottom:c.top,d="right"===p?-a.width+c.right:c.left,s&&f)l[f]="translate3d("+d+"px, "+g+"px, 0)",l[u]=0,l[p]=0,l.willChange="transform";else{var m="bottom"===u?-1:1,v="right"===p?-1:1;l[u]=g*m,l[p]=d*v,l.willChange=u+", "+p}var y={"x-placement":e.placement};return e.attributes=T({},y,e.attributes),e.styles=T({},l,e.styles),e.arrowStyles=T({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return q(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&q(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,i,r){var o=N(r,t,e,n.positionFixed),s=I(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",s),q(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=s(this.update.bind(this)),this.options=T({},e.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(T({},e.Defaults.modifiers,r.modifiers)).forEach(function(t){i.options.modifiers[t]=T({},e.Defaults.modifiers[t]||{},r.modifiers?r.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return T({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&a(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return w(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=N(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=I(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=L(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=R(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[F("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=W(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=G,Q.Defaults=$,t.default=Q}.call(this,n(10))},function(e,t,n){
/*!
  * Bootstrap v4.1.1 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.forEach(function(t){o(e,t,n[t])})}return e}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var a=function(e){var t="transitionend";function n(t){var n=this,r=!1;return e(this).one(i.TRANSITION_END,function(){r=!0}),setTimeout(function(){r||i.triggerTransitionEnd(n)},t),this}var i={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(t){var n=t.getAttribute("data-target");n&&"#"!==n||(n=t.getAttribute("href")||"");try{var i=e(document).find(n);return i.length>0?n:null}catch(e){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var n=e(t).css("transition-duration"),i=parseFloat(n);return i?(n=n.split(",")[0],1e3*parseFloat(n)):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(n){e(n).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var o=n[r],s=t[r],a=s&&i.isElement(s)?"element":(l=s,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(a))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+o+'".')}var l}};return e.fn.emulateTransitionEnd=n,e.event.special[i.TRANSITION_END]={bindType:t,delegateType:t,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},i}(t),l=function(e){var t=e.fn.alert,n={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},i={ALERT:"alert",FADE:"fade",SHOW:"show"},o=function(){function t(e){this._element=e}var o=t.prototype;return o.close=function(e){var t=this._element;e&&(t=this._getRootElement(e));var n=this._triggerCloseEvent(t);n.isDefaultPrevented()||this._removeElement(t)},o.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},o._getRootElement=function(t){var n=a.getSelectorFromElement(t),r=!1;return n&&(r=e(n)[0]),r||(r=e(t).closest("."+i.ALERT)[0]),r},o._triggerCloseEvent=function(t){var i=e.Event(n.CLOSE);return e(t).trigger(i),i},o._removeElement=function(t){var n=this;if(e(t).removeClass(i.SHOW),e(t).hasClass(i.FADE)){var r=a.getTransitionDurationFromElement(t);e(t).one(a.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(r)}else this._destroyElement(t)},o._destroyElement=function(t){e(t).detach().trigger(n.CLOSED).remove()},t._jQueryInterface=function(n){return this.each(function(){var i=e(this),r=i.data("bs.alert");r||(r=new t(this),i.data("bs.alert",r)),"close"===n&&r[n](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}();return e(document).on(n.CLICK_DATA_API,'[data-dismiss="alert"]',o._handleDismiss(new o)),e.fn.alert=o._jQueryInterface,e.fn.alert.Constructor=o,e.fn.alert.noConflict=function(){return e.fn.alert=t,o._jQueryInterface},o}(t),c=function(e){var t="button",n=e.fn[t],i={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},s={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},a=function(){function t(e){this._element=e}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,r=e(this._element).closest(o.DATA_TOGGLE)[0];if(r){var s=e(this._element).find(o.INPUT)[0];if(s){if("radio"===s.type)if(s.checked&&e(this._element).hasClass(i.ACTIVE))t=!1;else{var a=e(r).find(o.ACTIVE)[0];a&&e(a).removeClass(i.ACTIVE)}if(t){if(s.hasAttribute("disabled")||r.hasAttribute("disabled")||s.classList.contains("disabled")||r.classList.contains("disabled"))return;s.checked=!e(this._element).hasClass(i.ACTIVE),e(s).trigger("change")}s.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!e(this._element).hasClass(i.ACTIVE)),t&&e(this._element).toggleClass(i.ACTIVE)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each(function(){var i=e(this).data("bs.button");i||(i=new t(this),e(this).data("bs.button",i)),"toggle"===n&&i[n]()})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}();return e(document).on(s.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var n=t.target;e(n).hasClass(i.BUTTON)||(n=e(n).closest(o.BUTTON)),a._jQueryInterface.call(e(n),"toggle")}).on(s.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(t){var n=e(t.target).closest(o.BUTTON)[0];e(n).toggleClass(i.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=a._jQueryInterface,e.fn[t].Constructor=a,e.fn[t].noConflict=function(){return e.fn[t]=n,a._jQueryInterface},a}(t),u=function(e){var t="carousel",n="bs.carousel",i="."+n,o=e.fn[t],l={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},c={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},u={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},p={SLIDE:"slide"+i,SLID:"slid"+i,KEYDOWN:"keydown"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i,TOUCHEND:"touchend"+i,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},f={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},d={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},h=function(){function o(t,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=e(t)[0],this._indicatorsElement=e(this._element).find(d.INDICATORS)[0],this._addEventListeners()}var h=o.prototype;return h.next=function(){this._isSliding||this._slide(u.NEXT)},h.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},h.prev=function(){this._isSliding||this._slide(u.PREV)},h.pause=function(t){t||(this._isPaused=!0),e(this._element).find(d.NEXT_PREV)[0]&&(a.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},h.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},h.to=function(t){var n=this;this._activeElement=e(this._element).find(d.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(p.SLID,function(){return n.to(t)});else{if(i===t)return this.pause(),void this.cycle();var r=t>i?u.NEXT:u.PREV;this._slide(r,this._items[t])}},h.dispose=function(){e(this._element).off(i),e.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},h._getConfig=function(e){return e=s({},l,e),a.typeCheckConfig(t,e,c),e},h._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(p.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(p.MOUSEENTER,function(e){return t.pause(e)}).on(p.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(p.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},h._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},h._getItemIndex=function(t){return this._items=e.makeArray(e(t).parent().find(d.ITEM)),this._items.indexOf(t)},h._getItemByDirection=function(e,t){var n=e===u.NEXT,i=e===u.PREV,r=this._getItemIndex(t),o=this._items.length-1,s=i&&0===r||n&&r===o;if(s&&!this._config.wrap)return t;var a=e===u.PREV?-1:1,l=(r+a)%this._items.length;return-1===l?this._items[this._items.length-1]:this._items[l]},h._triggerSlideEvent=function(t,n){var i=this._getItemIndex(t),r=this._getItemIndex(e(this._element).find(d.ACTIVE_ITEM)[0]),o=e.Event(p.SLIDE,{relatedTarget:t,direction:n,from:r,to:i});return e(this._element).trigger(o),o},h._setActiveIndicatorElement=function(t){if(this._indicatorsElement){e(this._indicatorsElement).find(d.ACTIVE).removeClass(f.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&e(n).addClass(f.ACTIVE)}},h._slide=function(t,n){var i,r,o,s=this,l=e(this._element).find(d.ACTIVE_ITEM)[0],c=this._getItemIndex(l),h=n||l&&this._getItemByDirection(t,l),g=this._getItemIndex(h),m=Boolean(this._interval);if(t===u.NEXT?(i=f.LEFT,r=f.NEXT,o=u.LEFT):(i=f.RIGHT,r=f.PREV,o=u.RIGHT),h&&e(h).hasClass(f.ACTIVE))this._isSliding=!1;else{var v=this._triggerSlideEvent(h,o);if(!v.isDefaultPrevented()&&l&&h){this._isSliding=!0,m&&this.pause(),this._setActiveIndicatorElement(h);var y=e.Event(p.SLID,{relatedTarget:h,direction:o,from:c,to:g});if(e(this._element).hasClass(f.SLIDE)){e(h).addClass(r),a.reflow(h),e(l).addClass(i),e(h).addClass(i);var b=a.getTransitionDurationFromElement(l);e(l).one(a.TRANSITION_END,function(){e(h).removeClass(i+" "+r).addClass(f.ACTIVE),e(l).removeClass(f.ACTIVE+" "+r+" "+i),s._isSliding=!1,setTimeout(function(){return e(s._element).trigger(y)},0)}).emulateTransitionEnd(b)}else e(l).removeClass(f.ACTIVE),e(h).addClass(f.ACTIVE),this._isSliding=!1,e(this._element).trigger(y);m&&this.cycle()}}},o._jQueryInterface=function(t){return this.each(function(){var i=e(this).data(n),r=s({},l,e(this).data());"object"==typeof t&&(r=s({},r,t));var a="string"==typeof t?t:r.slide;if(i||(i=new o(this,r),e(this).data(n,i)),"number"==typeof t)i.to(t);else if("string"==typeof a){if(void 0===i[a])throw new TypeError('No method named "'+a+'"');i[a]()}else r.interval&&(i.pause(),i.cycle())})},o._dataApiClickHandler=function(t){var i=a.getSelectorFromElement(this);if(i){var r=e(i)[0];if(r&&e(r).hasClass(f.CAROUSEL)){var l=s({},e(r).data(),e(this).data()),c=this.getAttribute("data-slide-to");c&&(l.interval=!1),o._jQueryInterface.call(e(r),l),c&&e(r).data(n).to(c),t.preventDefault()}}},r(o,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return l}}]),o}();return e(document).on(p.CLICK_DATA_API,d.DATA_SLIDE,h._dataApiClickHandler),e(window).on(p.LOAD_DATA_API,function(){e(d.DATA_RIDE).each(function(){var t=e(this);h._jQueryInterface.call(t,t.data())})}),e.fn[t]=h._jQueryInterface,e.fn[t].Constructor=h,e.fn[t].noConflict=function(){return e.fn[t]=o,h._jQueryInterface},h}(t),p=function(e){var t="collapse",n="bs.collapse",i=e.fn[t],o={toggle:!0,parent:""},l={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},u={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},p={WIDTH:"width",HEIGHT:"height"},f={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},d=function(){function i(t,n){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(n),this._triggerArray=e.makeArray(e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var i=e(f.DATA_TOGGLE),r=0;r<i.length;r++){var o=i[r],s=a.getSelectorFromElement(o);null!==s&&e(s).filter(t).length>0&&(this._selector=s,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var d=i.prototype;return d.toggle=function(){e(this._element).hasClass(u.SHOW)?this.hide():this.show()},d.show=function(){var t,r,o=this;if(!(this._isTransitioning||e(this._element).hasClass(u.SHOW)||(this._parent&&0===(t=e.makeArray(e(this._parent).find(f.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),t&&(r=e(t).not(this._selector).data(n))&&r._isTransitioning))){var s=e.Event(c.SHOW);if(e(this._element).trigger(s),!s.isDefaultPrevented()){t&&(i._jQueryInterface.call(e(t).not(this._selector),"hide"),r||e(t).data(n,null));var l=this._getDimension();e(this._element).removeClass(u.COLLAPSE).addClass(u.COLLAPSING),this._element.style[l]=0,this._triggerArray.length>0&&e(this._triggerArray).removeClass(u.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var p=l[0].toUpperCase()+l.slice(1),d="scroll"+p,h=a.getTransitionDurationFromElement(this._element);e(this._element).one(a.TRANSITION_END,function(){e(o._element).removeClass(u.COLLAPSING).addClass(u.COLLAPSE).addClass(u.SHOW),o._element.style[l]="",o.setTransitioning(!1),e(o._element).trigger(c.SHOWN)}).emulateTransitionEnd(h),this._element.style[l]=this._element[d]+"px"}}},d.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(u.SHOW)){var n=e.Event(c.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();if(this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",a.reflow(this._element),e(this._element).addClass(u.COLLAPSING).removeClass(u.COLLAPSE).removeClass(u.SHOW),this._triggerArray.length>0)for(var r=0;r<this._triggerArray.length;r++){var o=this._triggerArray[r],s=a.getSelectorFromElement(o);if(null!==s){var l=e(s);l.hasClass(u.SHOW)||e(o).addClass(u.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0),this._element.style[i]="";var p=a.getTransitionDurationFromElement(this._element);e(this._element).one(a.TRANSITION_END,function(){t.setTransitioning(!1),e(t._element).removeClass(u.COLLAPSING).addClass(u.COLLAPSE).trigger(c.HIDDEN)}).emulateTransitionEnd(p)}}},d.setTransitioning=function(e){this._isTransitioning=e},d.dispose=function(){e.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},d._getConfig=function(e){return(e=s({},o,e)).toggle=Boolean(e.toggle),a.typeCheckConfig(t,e,l),e},d._getDimension=function(){var t=e(this._element).hasClass(p.WIDTH);return t?p.WIDTH:p.HEIGHT},d._getParent=function(){var t=this,n=null;a.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=e(this._config.parent)[0];var r='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return e(n).find(r).each(function(e,n){t._addAriaAndCollapsedClass(i._getTargetFromElement(n),[n])}),n},d._addAriaAndCollapsedClass=function(t,n){if(t){var i=e(t).hasClass(u.SHOW);n.length>0&&e(n).toggleClass(u.COLLAPSED,!i).attr("aria-expanded",i)}},i._getTargetFromElement=function(t){var n=a.getSelectorFromElement(t);return n?e(n)[0]:null},i._jQueryInterface=function(t){return this.each(function(){var r=e(this),a=r.data(n),l=s({},o,r.data(),"object"==typeof t&&t?t:{});if(!a&&l.toggle&&/show|hide/.test(t)&&(l.toggle=!1),a||(a=new i(this,l),r.data(n,a)),"string"==typeof t){if(void 0===a[t])throw new TypeError('No method named "'+t+'"');a[t]()}})},r(i,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return o}}]),i}();return e(document).on(c.CLICK_DATA_API,f.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var i=e(this),r=a.getSelectorFromElement(this);e(r).each(function(){var t=e(this),r=t.data(n),o=r?"toggle":i.data();d._jQueryInterface.call(t,o)})}),e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=i,d._jQueryInterface},d}(t),f=function(e){var t="dropdown",i="bs.dropdown",o="."+i,l=e.fn[t],c=new RegExp("38|40|27"),u={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,CLICK:"click"+o,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},p={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},f={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},d={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},h={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},g={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},m=function(){function l(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var m=l.prototype;return m.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(p.DISABLED)){var t=l._getParentFromElement(this._element),i=e(this._menu).hasClass(p.SHOW);if(l._clearMenus(),!i){var r={relatedTarget:this._element},o=e.Event(u.SHOW,r);if(e(t).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var s=this._element;"parent"===this._config.reference?s=t:a.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(t).addClass(p.POSITION_STATIC),this._popper=new n(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(t).closest(f.NAVBAR_NAV).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(p.SHOW),e(t).toggleClass(p.SHOW).trigger(e.Event(u.SHOWN,r))}}}},m.dispose=function(){e.removeData(this._element,i),e(this._element).off(o),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},m.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},m._addEventListeners=function(){var t=this;e(this._element).on(u.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},m._getConfig=function(n){return n=s({},this.constructor.Default,e(this._element).data(),n),a.typeCheckConfig(t,n,this.constructor.DefaultType),n},m._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=e(t).find(f.MENU)[0]}return this._menu},m._getPlacement=function(){var t=e(this._element).parent(),n=d.BOTTOM;return t.hasClass(p.DROPUP)?(n=d.TOP,e(this._menu).hasClass(p.MENURIGHT)&&(n=d.TOPEND)):t.hasClass(p.DROPRIGHT)?n=d.RIGHT:t.hasClass(p.DROPLEFT)?n=d.LEFT:e(this._menu).hasClass(p.MENURIGHT)&&(n=d.BOTTOMEND),n},m._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},m._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=s({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},l._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(i),r="object"==typeof t?t:null;if(n||(n=new l(this,r),e(this).data(i,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},l._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=e.makeArray(e(f.DATA_TOGGLE)),r=0;r<n.length;r++){var o=l._getParentFromElement(n[r]),s=e(n[r]).data(i),a={relatedTarget:n[r]};if(s){var c=s._menu;if(e(o).hasClass(p.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(o,t.target))){var d=e.Event(u.HIDE,a);e(o).trigger(d),d.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),n[r].setAttribute("aria-expanded","false"),e(c).removeClass(p.SHOW),e(o).removeClass(p.SHOW).trigger(e.Event(u.HIDDEN,a)))}}}},l._getParentFromElement=function(t){var n,i=a.getSelectorFromElement(t);return i&&(n=e(i)[0]),n||t.parentNode},l._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(f.MENU).length)):c.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(p.DISABLED))){var n=l._getParentFromElement(this),i=e(n).hasClass(p.SHOW);if((i||27===t.which&&32===t.which)&&(!i||27!==t.which&&32!==t.which)){var r=e(n).find(f.VISIBLE_ITEMS).get();if(0!==r.length){var o=r.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<r.length-1&&o++,o<0&&(o=0),r[o].focus()}}else{if(27===t.which){var s=e(n).find(f.DATA_TOGGLE)[0];e(s).trigger("focus")}e(this).trigger("click")}}},r(l,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return h}},{key:"DefaultType",get:function(){return g}}]),l}();return e(document).on(u.KEYDOWN_DATA_API,f.DATA_TOGGLE,m._dataApiKeydownHandler).on(u.KEYDOWN_DATA_API,f.MENU,m._dataApiKeydownHandler).on(u.CLICK_DATA_API+" "+u.KEYUP_DATA_API,m._clearMenus).on(u.CLICK_DATA_API,f.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),m._jQueryInterface.call(e(this),"toggle")}).on(u.CLICK_DATA_API,f.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=m._jQueryInterface,e.fn[t].Constructor=m,e.fn[t].noConflict=function(){return e.fn[t]=l,m._jQueryInterface},m}(t),d=function(e){var t="modal",n=".bs.modal",i=e.fn.modal,o={backdrop:!0,keyboard:!0,focus:!0,show:!0},l={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},c={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},u={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},p={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},f=function(){function i(t,n){this._config=this._getConfig(n),this._element=t,this._dialog=e(t).find(p.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var f=i.prototype;return f.toggle=function(e){return this._isShown?this.hide():this.show(e)},f.show=function(t){var n=this;if(!this._isTransitioning&&!this._isShown){e(this._element).hasClass(u.FADE)&&(this._isTransitioning=!0);var i=e.Event(c.SHOW,{relatedTarget:t});e(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),e(document.body).addClass(u.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(c.CLICK_DISMISS,p.DATA_DISMISS,function(e){return n.hide(e)}),e(this._dialog).on(c.MOUSEDOWN_DISMISS,function(){e(n._element).one(c.MOUSEUP_DISMISS,function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))}},f.hide=function(t){var n=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var i=e.Event(c.HIDE);if(e(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var r=e(this._element).hasClass(u.FADE);if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(c.FOCUSIN),e(this._element).removeClass(u.SHOW),e(this._element).off(c.CLICK_DISMISS),e(this._dialog).off(c.MOUSEDOWN_DISMISS),r){var o=a.getTransitionDurationFromElement(this._element);e(this._element).one(a.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(o)}else this._hideModal()}}},f.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},f.handleUpdate=function(){this._adjustDialog()},f._getConfig=function(e){return e=s({},o,e),a.typeCheckConfig(t,e,l),e},f._showElement=function(t){var n=this,i=e(this._element).hasClass(u.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&a.reflow(this._element),e(this._element).addClass(u.SHOW),this._config.focus&&this._enforceFocus();var r=e.Event(c.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(r)};if(i){var s=a.getTransitionDurationFromElement(this._element);e(this._dialog).one(a.TRANSITION_END,o).emulateTransitionEnd(s)}else o()},f._enforceFocus=function(){var t=this;e(document).off(c.FOCUSIN).on(c.FOCUSIN,function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()})},f._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(c.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(c.KEYDOWN_DISMISS)},f._setResizeEvent=function(){var t=this;this._isShown?e(window).on(c.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(c.RESIZE)},f._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(u.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(c.HIDDEN)})},f._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},f._showBackdrop=function(t){var n=this,i=e(this._element).hasClass(u.FADE)?u.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=u.BACKDROP,i&&e(this._backdrop).addClass(i),e(this._backdrop).appendTo(document.body),e(this._element).on(c.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&a.reflow(this._backdrop),e(this._backdrop).addClass(u.SHOW),!t)return;if(!i)return void t();var r=a.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(a.TRANSITION_END,t).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(u.SHOW);var o=function(){n._removeBackdrop(),t&&t()};if(e(this._element).hasClass(u.FADE)){var s=a.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(a.TRANSITION_END,o).emulateTransitionEnd(s)}else o()}else t&&t()},f._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},f._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},f._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},f._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){e(p.FIXED_CONTENT).each(function(n,i){var r=e(i)[0].style.paddingRight,o=e(i).css("padding-right");e(i).data("padding-right",r).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),e(p.STICKY_CONTENT).each(function(n,i){var r=e(i)[0].style.marginRight,o=e(i).css("margin-right");e(i).data("margin-right",r).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}),e(p.NAVBAR_TOGGLER).each(function(n,i){var r=e(i)[0].style.marginRight,o=e(i).css("margin-right");e(i).data("margin-right",r).css("margin-right",parseFloat(o)+t._scrollbarWidth+"px")});var n=document.body.style.paddingRight,i=e(document.body).css("padding-right");e(document.body).data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},f._resetScrollbar=function(){e(p.FIXED_CONTENT).each(function(t,n){var i=e(n).data("padding-right");void 0!==i&&e(n).css("padding-right",i).removeData("padding-right")}),e(p.STICKY_CONTENT+", "+p.NAVBAR_TOGGLER).each(function(t,n){var i=e(n).data("margin-right");void 0!==i&&e(n).css("margin-right",i).removeData("margin-right")});var t=e(document.body).data("padding-right");void 0!==t&&e(document.body).css("padding-right",t).removeData("padding-right")},f._getScrollbarWidth=function(){var e=document.createElement("div");e.className=u.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},i._jQueryInterface=function(t,n){return this.each(function(){var r=e(this).data("bs.modal"),a=s({},o,e(this).data(),"object"==typeof t&&t?t:{});if(r||(r=new i(this,a),e(this).data("bs.modal",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t](n)}else a.show&&r.show(n)})},r(i,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return o}}]),i}();return e(document).on(c.CLICK_DATA_API,p.DATA_TOGGLE,function(t){var n,i=this,r=a.getSelectorFromElement(this);r&&(n=e(r)[0]);var o=e(n).data("bs.modal")?"toggle":s({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var l=e(n).one(c.SHOW,function(t){t.isDefaultPrevented()||l.one(c.HIDDEN,function(){e(i).is(":visible")&&i.focus()})});f._jQueryInterface.call(e(n),o,this)}),e.fn.modal=f._jQueryInterface,e.fn.modal.Constructor=f,e.fn.modal.noConflict=function(){return e.fn.modal=i,f._jQueryInterface},f}(t),h=function(e){var t="tooltip",i=".bs.tooltip",o=e.fn[t],l=new RegExp("(^|\\s)bs-tooltip\\S+","g"),c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},u={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},p={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},f={SHOW:"show",OUT:"out"},d={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,INSERTED:"inserted"+i,CLICK:"click"+i,FOCUSIN:"focusin"+i,FOCUSOUT:"focusout"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i},h={FADE:"fade",SHOW:"show"},g={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},m={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},v=function(){function o(e,t){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var v=o.prototype;return v.enable=function(){this._isEnabled=!0},v.disable=function(){this._isEnabled=!1},v.toggleEnabled=function(){this._isEnabled=!this._isEnabled},v.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,i=e(t.currentTarget).data(n);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(e(this.getTipElement()).hasClass(h.SHOW))return void this._leave(null,this);this._enter(null,this)}},v.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},v.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var i=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(i);var r=e.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!r)return;var o=this.getTipElement(),s=a.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(o).addClass(h.FADE);var l="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,c=this._getAttachment(l);this.addAttachmentClass(c);var u=!1===this.config.container?document.body:e(this.config.container);e(o).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(o).appendTo(u),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,o,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:g.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(o).addClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var p=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===f.OUT&&t._leave(null,t)};if(e(this.tip).hasClass(h.FADE)){var d=a.getTransitionDurationFromElement(this.tip);e(this.tip).one(a.TRANSITION_END,p).emulateTransitionEnd(d)}else p()}},v.hide=function(t){var n=this,i=this.getTipElement(),r=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==f.SHOW&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};if(e(this.element).trigger(r),!r.isDefaultPrevented()){if(e(i).removeClass(h.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[m.CLICK]=!1,this._activeTrigger[m.FOCUS]=!1,this._activeTrigger[m.HOVER]=!1,e(this.tip).hasClass(h.FADE)){var s=a.getTransitionDurationFromElement(i);e(i).one(a.TRANSITION_END,o).emulateTransitionEnd(s)}else o();this._hoverState=""}},v.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},v.isWithContent=function(){return Boolean(this.getTitle())},v.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},v.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},v.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(g.TOOLTIP_INNER),this.getTitle()),t.removeClass(h.FADE+" "+h.SHOW)},v.setElementContent=function(t,n){var i=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?i?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text()):t[i?"html":"text"](n)},v.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},v._getAttachment=function(e){return u[e.toUpperCase()]},v._setListeners=function(){var t=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(n!==m.MANUAL){var i=n===m.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,r=n===m.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(i,t.config.selector,function(e){return t._enter(e)}).on(r,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},v._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},v._enter=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusin"===t.type?m.FOCUS:m.HOVER]=!0),e(n.getTipElement()).hasClass(h.SHOW)||n._hoverState===f.SHOW?n._hoverState=f.SHOW:(clearTimeout(n._timeout),n._hoverState=f.SHOW,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===f.SHOW&&n.show()},n.config.delay.show):n.show())},v._leave=function(t,n){var i=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(i))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(i,n)),t&&(n._activeTrigger["focusout"===t.type?m.FOCUS:m.HOVER]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=f.OUT,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===f.OUT&&n.hide()},n.config.delay.hide):n.hide())},v._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},v._getConfig=function(n){return"number"==typeof(n=s({},this.constructor.Default,e(this.element).data(),"object"==typeof n&&n?n:{})).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),a.typeCheckConfig(t,n,this.constructor.DefaultType),n},v._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},v._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(l);null!==n&&n.length>0&&t.removeClass(n.join(""))},v._handlePopperPlacementChange=function(e){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},v._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(h.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},o._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.tooltip"),i="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new o(this,i),e(this).data("bs.tooltip",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},r(o,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return p}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return d}},{key:"EVENT_KEY",get:function(){return i}},{key:"DefaultType",get:function(){return c}}]),o}();return e.fn[t]=v._jQueryInterface,e.fn[t].Constructor=v,e.fn[t].noConflict=function(){return e.fn[t]=o,v._jQueryInterface},v}(t),g=function(e){var t="popover",n=".bs.popover",i=e.fn[t],o=new RegExp("(^|\\s)bs-popover\\S+","g"),a=s({},h.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),l=s({},h.DefaultType,{content:"(string|element|function)"}),c={FADE:"fade",SHOW:"show"},u={TITLE:".popover-header",CONTENT:".popover-body"},p={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},f=function(i){var s,f;function d(){return i.apply(this,arguments)||this}f=i,(s=d).prototype=Object.create(f.prototype),s.prototype.constructor=s,s.__proto__=f;var h=d.prototype;return h.isWithContent=function(){return this.getTitle()||this._getContent()},h.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},h.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},h.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(u.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(u.CONTENT),n),t.removeClass(c.FADE+" "+c.SHOW)},h._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},h._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(o);null!==n&&n.length>0&&t.removeClass(n.join(""))},d._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.popover"),i="object"==typeof t?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new d(this,i),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},r(d,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return a}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return l}}]),d}(h);return e.fn[t]=f._jQueryInterface,e.fn[t].Constructor=f,e.fn[t].noConflict=function(){return e.fn[t]=i,f._jQueryInterface},f}(t),m=function(e){var t="scrollspy",n=e.fn[t],i={offset:10,method:"auto",target:""},o={offset:"number",method:"string",target:"(string|element)"},l={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},c={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},u={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},p={OFFSET:"offset",POSITION:"position"},f=function(){function n(t,n){var i=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+u.NAV_LINKS+","+this._config.target+" "+u.LIST_ITEMS+","+this._config.target+" "+u.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(l.SCROLL,function(e){return i._process(e)}),this.refresh(),this._process()}var f=n.prototype;return f.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?p.OFFSET:p.POSITION,i="auto"===this._config.method?n:this._config.method,r=i===p.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var o=e.makeArray(e(this._selector));o.map(function(t){var n,o=a.getSelectorFromElement(t);if(o&&(n=e(o)[0]),n){var s=n.getBoundingClientRect();if(s.width||s.height)return[e(n)[i]().top+r,o]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},f.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},f._getConfig=function(n){if("string"!=typeof(n=s({},i,"object"==typeof n&&n?n:{})).target){var r=e(n.target).attr("id");r||(r=a.getUID(t),e(n.target).attr("id",r)),n.target="#"+r}return a.typeCheckConfig(t,n,o),n},f._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},f._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},f._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},f._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){var o=this._activeTarget!==this._targets[r]&&e>=this._offsets[r]&&(void 0===this._offsets[r+1]||e<this._offsets[r+1]);o&&this._activate(this._targets[r])}}},f._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",");n=n.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var i=e(n.join(","));i.hasClass(c.DROPDOWN_ITEM)?(i.closest(u.DROPDOWN).find(u.DROPDOWN_TOGGLE).addClass(c.ACTIVE),i.addClass(c.ACTIVE)):(i.addClass(c.ACTIVE),i.parents(u.NAV_LIST_GROUP).prev(u.NAV_LINKS+", "+u.LIST_ITEMS).addClass(c.ACTIVE),i.parents(u.NAV_LIST_GROUP).prev(u.NAV_ITEMS).children(u.NAV_LINKS).addClass(c.ACTIVE)),e(this._scrollElement).trigger(l.ACTIVATE,{relatedTarget:t})},f._clear=function(){e(this._selector).filter(u.ACTIVE).removeClass(c.ACTIVE)},n._jQueryInterface=function(t){return this.each(function(){var i=e(this).data("bs.scrollspy"),r="object"==typeof t&&t;if(i||(i=new n(this,r),e(this).data("bs.scrollspy",i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t]()}})},r(n,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return i}}]),n}();return e(window).on(l.LOAD_DATA_API,function(){for(var t=e.makeArray(e(u.DATA_SPY)),n=t.length;n--;){var i=e(t[n]);f._jQueryInterface.call(i,i.data())}}),e.fn[t]=f._jQueryInterface,e.fn[t].Constructor=f,e.fn[t].noConflict=function(){return e.fn[t]=n,f._jQueryInterface},f}(t),v=function(e){var t=e.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},i={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},s=function(){function t(e){this._element=e}var s=t.prototype;return s.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(i.ACTIVE)||e(this._element).hasClass(i.DISABLED))){var r,s,l=e(this._element).closest(o.NAV_LIST_GROUP)[0],c=a.getSelectorFromElement(this._element);if(l){var u="UL"===l.nodeName?o.ACTIVE_UL:o.ACTIVE;s=(s=e.makeArray(e(l).find(u)))[s.length-1]}var p=e.Event(n.HIDE,{relatedTarget:this._element}),f=e.Event(n.SHOW,{relatedTarget:s});if(s&&e(s).trigger(p),e(this._element).trigger(f),!f.isDefaultPrevented()&&!p.isDefaultPrevented()){c&&(r=e(c)[0]),this._activate(this._element,l);var d=function(){var i=e.Event(n.HIDDEN,{relatedTarget:t._element}),r=e.Event(n.SHOWN,{relatedTarget:s});e(s).trigger(i),e(t._element).trigger(r)};r?this._activate(r,r.parentNode,d):d()}}},s.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},s._activate=function(t,n,r){var s=this,l=("UL"===n.nodeName?e(n).find(o.ACTIVE_UL):e(n).children(o.ACTIVE))[0],c=r&&l&&e(l).hasClass(i.FADE),u=function(){return s._transitionComplete(t,l,r)};if(l&&c){var p=a.getTransitionDurationFromElement(l);e(l).one(a.TRANSITION_END,u).emulateTransitionEnd(p)}else u()},s._transitionComplete=function(t,n,r){if(n){e(n).removeClass(i.SHOW+" "+i.ACTIVE);var s=e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];s&&e(s).removeClass(i.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(i.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),a.reflow(t),e(t).addClass(i.SHOW),t.parentNode&&e(t.parentNode).hasClass(i.DROPDOWN_MENU)){var l=e(t).closest(o.DROPDOWN)[0];l&&e(l).find(o.DROPDOWN_TOGGLE).addClass(i.ACTIVE),t.setAttribute("aria-expanded",!0)}r&&r()},t._jQueryInterface=function(n){return this.each(function(){var i=e(this),r=i.data("bs.tab");if(r||(r=new t(this),i.data("bs.tab",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},r(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}();return e(document).on(n.CLICK_DATA_API,o.DATA_TOGGLE,function(t){t.preventDefault(),s._jQueryInterface.call(e(this),"show")}),e.fn.tab=s._jQueryInterface,e.fn.tab.Constructor=s,e.fn.tab.noConflict=function(){return e.fn.tab=t,s._jQueryInterface},s}(t);(function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(t),e.Util=a,e.Alert=l,e.Button=c,e.Carousel=u,e.Collapse=p,e.Dropdown=f,e.Modal=d,e.Popover=g,e.Scrollspy=m,e.Tab=v,e.Tooltip=h,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(6),n(47))},function(e,t,n){"use strict";(function(e){n(61),n(48);var t;(t=n(14))&&t.__esModule;var i=n(31);n(29);e("#menu-toggle").click(function(t){t.preventDefault(),e("#wrapper").toggleClass("toggled")}),e(document).ready(function(){setInterval(function(){console.log("PING")},1e3),i.loadWidgets()})}).call(this,n(6))},,,,,,,,,,,,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,